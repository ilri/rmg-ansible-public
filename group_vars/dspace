---
# file: group_vars/dspace

# a list of networks to allow SSH access
# (network names come from above)
# can be overridden in host_vars
#
# default: ilri_nbo_corp
ssh_access:
  - ilri_nbo_corp

# a list of networks to allow HTTP access
# (network names come from above)
# can be overridden in host_vars
#
# default: ilri_nbo_corp
web_access:
  - ilri_nbo_corp

apt_mirror: ubuntu-archive.mirror.liquidtelecom.com

# Mozilla intermediate SSL cipher suite
tls_cipher_suite: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"

dspace_git_repo: https://github.com/ilri/DSpace.git
dspace_git_branch: 6_x-prod

# stable is 1.20.x
# mainline is 1.21.x
nginx_branch: stable

munin_tomcat_user: ilri-munin
# plain http connector for munin to query Tomcat status
munin_tomcat_port: 8081

# PostgreSQL connection pool sizes for DSpace web (XMLUI) and API (REST, OAI)
# applications.
dspace_dbpool_web_max_connections: 250
dspace_dbpool_api_max_connections: 50

# postgresql version to deploy
pg_version: 10

# postgresql default is 100, keep in mind that you need to accomodate the DSpace web application pool, command line pool, and leave a few for the postgres super user
pg_max_connections: "{{ (dspace_dbpool_web_max_connections + dspace_dbpool_api_max_connections + 33) | int | abs }}"

# effective_cache_size: not allocated, simply a hint to the PostgreSQL planner
#                       about how much memory the server can use (combining the
#                       shared buffers, filesystem cache, work mem, etc). The
#                       default is 4GB but let's say PostgreSQL can use slightly
#                       less than half of the system memory (leave room for the
#                       JVM heap and for Solr's data in fs caches).
pg_effective_cache_size: '{{ (ansible_memtotal_mb*0.375)|int }}'
# shared_buffers: default 128MB, recommended starting point is the size of all
#                 databases up to 25% of available RAM (not system RAM! See the
#                 effective_cache_size above). Note we have to cast to int two
#                 times because pg_effective_cache_size is a string!
pg_shared_buffers: '{{ ((pg_effective_cache_size|int)*0.25)|int }}'

pg_confd_vars:
  - { name: "effective_cache_size", value: "{{ pg_effective_cache_size }}MB" }
  - { name: "shared_buffers", value: "{{ pg_shared_buffers }}MB" }
# random_page_cost: default 4, can be closer to 1 if using an SSD
  - { name: "random_page_cost", value: "1.1" }
# effective_io_concurrency: default 1, increase to "hundreds" on SSDs
  - { name: "effective_io_concurrency", value: "200" }
# work_mem: default 4MB, will leave it for now until I can measure
  - { name: "#work_mem", value: "4MB" }
# maintenance_work_mem: default 64MB, will leave it for now until I can measure
  - { name: "#maintenance_work_mem", value: "64MB" }
# *_wal_size: default is 80MB and 1GB, increasing to allow larger write ahead
  - { name: "min_wal_size", value: "1GB" }
  - { name: "max_wal_size", value: "4GB" }
# wal_buffers: The amount of shared memory used for WAL data that has not yet
#              been written to disk (default is 1/3 of shared_buffers)
  - { name: "wal_buffers", value: "16MB" }
# worker processes: set to 2/3 of available CPUs and 1/3 for gather
  - { name: "max_worker_processes", value: "{{ (ansible_processor_count*(2/3))|int|abs }}" }
  - { name: "max_parallel_workers_per_gather", value: "{{ (ansible_processor_count*(1/3))|int|abs }}" }
  - { name: "max_parallel_workers", value: "{{ (ansible_processor_count*(2/3))|int|abs }}" }
# after loading we still need to create the extension in the database...
  - { name: "shared_preload_libraries", value: "'pg_stat_statements'" }
# make log messages more useful
  - { name: "log_line_prefix", value: "'%t:%r:%u@%d:[%p]: '" }
  - { name: "log_min_duration_statement", value: "100" }
  - { name: "log_lock_waits", value: "true" }

# All hosts run fail2ban with the sshd filter, but some can use other filters.
# For example, DSpace hosts run nginx so we can use the nginx-botsearch filter
# to ban hosts that request wp-login.php etc here.
extra_fail2ban_filters:
  - nginx

# vim: set ts=2 sw=2:

---

- name: Install mailx on CentOS hosts
  yum: name=mailx state=present
  when: ansible_distribution == 'CentOS'
  tags: packages

- name: Install heirloom-mailx
  apt: name=heirloom-mailx state=present
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version is version_compare('16.04', '<')
  tags: packages

- name: Install s-nail
  apt: name=s-nail state=present
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version is version_compare('16.04', '>=')
  tags: packages

- name: Copy backup scripts
  copy: src={{ item }} dest=/opt/ilri/scripts/ owner=root group=root mode=0755
  with_fileglob:
    - scripts/*.sh

- name: Copy backup script templates
  template: src={{ item.src }} dest={{ item.dest }} owner=root group=root mode=0755
  loop:
    - { src: "scripts/backup_mysql.py.j2", dest: "/opt/ilri/scripts/backup_mysql.py" }
    - { src: "scripts/backup_postgresql.py.j2", dest: "/opt/ilri/scripts/backup_postgresql.py" }

# Install the restic binary as restic-0.9.5 to make version handling easier, as
# I can then just test if my expected version exists rather than trying to parse
# the output of `restic version` (especially since I don't know what versioning
# they will use in the future).
- block:
  - name: Check restic version
    stat:
      path: "{{ restic_binary_path }}-{{ restic_version }}"
    register: restic_stat

  - name: Download restic
    get_url:
      url: "{{ restic_url }}"
      dest: "{{ restic_binary_path }}-{{ restic_version }}.bz2"
      checksum: "sha256:{{ restic_url_checksum }}"
    register: restic_download
    when: restic_stat.stat.exists is False

  # The Ansible unarchive module expects a tarred archive so we must use bunzip2
  - name: Unzip restic
    command:
    args:
      argv:
        - bunzip2
        - -f
        - "{{ restic_binary_path }}-{{ restic_version }}.bz2"
    when: restic_download is changed
    register: restic_binary

  - name: Make restic binary executable
    file:
      path: "{{ restic_binary_path }}-{{ restic_version }}"
      owner: root
      group: root
      mode: 0755
    when: restic_binary is changed

  - name: Configure restic symlink
    file:
      src: "{{ restic_binary_path }}-{{ restic_version }}"
      dest: "{{ restic_binary_path }}"
      owner: root
      group: root
      state: link
      force: yes
    when: restic_binary is changed

  - name: Remove old restic versions
    file:
      path: "{{ item }}"
      state: absent
    loop:
      - "{{ restic_binary_path }}-0.9.2"
      - "{{ restic_binary_path }}-0.9.3"
      - "{{ restic_binary_path }}-0.9.4"

  - name: Copy restic-backup.sh
    template: src=scripts/restic-backup.sh.j2 dest=/opt/ilri/scripts/restic-backup.sh owner=root group=root mode=0755

  - name: Copy restic systemd service units
    template: src=restic-backup.service.j2 dest=/etc/systemd/system/restic-backup.service mode=0644 owner=root group=root
    register: restic_systemd_service

  - name: Copy restic systemd timer unit
    copy: src=restic-backup.timer dest=/etc/systemd/system/restic-backup.timer mode=0644 owner=root group=root
    register: restic_systemd_timer

  - name: Copy restic-backup environment
    template: src=restic-backup-environment.j2 dest=/etc/restic-backup mode=0660 owner=root group=root
    register: restic_systemd_environment

  # need to reload to pick up service/timer/environment changes
  - name: Reload systemd daemon
    systemd: daemon_reload=yes
    when: restic_systemd_service is changed
          or restic_systemd_timer is changed
          or restic_systemd_environment is changed

  - name: Start and enable restic systemd timer
    systemd: name=restic-backup.timer state=started enabled=yes

  when: restic_password is defined
  tags: restic

# vim: set sw=2 ts=2:

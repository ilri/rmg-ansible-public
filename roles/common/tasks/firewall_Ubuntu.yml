---
# Ubuntu 20.04 will use nftables directly, with no firewalld.
# Ubuntu 18.04 will use nftables directly, with no firewalld.
# Ubuntu 16.04 will use firewalld with the iptables backend.
# Ubuntu 14.04 will use iptables-persistent.

- block:
  - name: Install iptables-persistent
    when: ansible_distribution_version is version('14.04', '==')
    apt: name=iptables-persistent state=present cache_valid_time=3600
    tags: packages

  - name: Copy /etc/iptables/rules.v4
    when: ansible_distribution_version is version('14.04', '==')
    template: src=iptables.j2 dest=/etc/iptables/rules.v4 owner=root group=root mode=0600
    notify:
      - restart iptables-persistent

  - name: Copy /etc/iptables/rules.v6
    when: ansible_distribution_version is version('14.04', '==')
    template: src=ip6tables.j2 dest=/etc/iptables/rules.v6 owner=root group=root mode=0600
    notify:
      - restart iptables-persistent

  - name: Set Ubuntu firewall packages
    when: ansible_distribution_version is version('16.04', '==')
    set_fact:
      ubuntu_firewall_packages:
        - firewalld
        - tidy
        - fail2ban
        - python3-systemd # for fail2ban systemd backend

  - name: Set Ubuntu firewall packages
    when: ansible_distribution_version is version('18.04', '>=')
    set_fact:
      ubuntu_firewall_packages:
        - fail2ban
        - libnet-ip-perl # for aggregate-cidr-addresses.pl
        - nftables
        - python3-systemd
        - curl # for nftables update scripts

  - name: Install firewall packages
    when: ansible_distribution_version is version('16.04', '>=')
    apt: pkg={{ ubuntu_firewall_packages }} state=present cache_valid_time=3600

  # Ubuntu 18.04's linux-virtual and linux-kvm kernels don't support nftables.
  # For virtual machines we need to either install the generic kernel, which
  # pulls in a bunch of firmware and microcode, or use the LTS enablement stack
  # to get a newer virtual kernel that supports nftables.
  #
  # See: https://bugs.launchpad.net/ubuntu/+source/linux-kvm/+bug/1881346
  - name: Install Ubuntu LTS kernel package
    when: ansible_distribution_version is version('18.04', '==') and ansible_virtualization_role == 'guest'
    apt: pkg=linux-virtual-hwe-18.04 state=present cache_valid_time=3600

  - name: Remove ufw
    when: ansible_distribution_version is version('16.04', '>=')
    apt: pkg=ufw state=absent
    tags: packages

  - include_tasks: nftables.yml
    when: ansible_distribution_version is version('18.04', '>=')

  - name: Copy firewalld public zone file
    when: ansible_distribution_version is version('16.04', '==')
    template: src=public.xml.j2 dest=/etc/firewalld/zones/public.xml owner=root mode=0600

  - name: Format public.xml firewalld zone file
    when: ansible_distribution_version is version('16.04', '==')
    command: tidy -xml -iq -m -w 0 /etc/firewalld/zones/public.xml
    notify:
      - restart firewalld
      - restart fail2ban

  - name: Copy firewalld ipsets
    when: ansible_distribution_version is version('16.04', '==')
    copy: src={{ item.src }} dest=/etc/firewalld/ipsets/{{ item.src }} owner=root group=root mode=0600 force={{ item.force }}
    loop:
      - { src: "spamhaus-ipv4.xml", force: "no" }
      - { src: "spamhaus-ipv6.xml", force: "no" }
      - { src: "abusers-ipv4.xml", force: "yes" }
      - { src: "abusers-ipv6.xml", force: "yes" }
    notify:
      - restart firewalld
      - restart fail2ban

  - name: Copy Spamhaus firewalld update script
    when: ansible_distribution_version is version('16.04', '==')
    copy: src=update-spamhaus-lists.sh dest=/usr/local/bin/update-spamhaus-lists.sh mode=0755 owner=root group=root

  - name: Copy Spamhaus firewalld systemd units
    when: ansible_distribution_version is version('16.04', '==')
    copy: src={{ item }} dest=/etc/systemd/system/{{ item }} mode=0644 owner=root group=root
    loop:
        - update-spamhaus-lists.service
        - update-spamhaus-lists.timer
    register: spamhaus_firewalld_systemd_units

  # need to reload to pick up service/timer/environment changes
  - name: Reload systemd daemon
    systemd: daemon_reload=yes
    when: spamhaus_firewalld_systemd_units is changed

  - name: Start and enable Spamhaus firewalld update timer
    when: ansible_distribution_version is version('16.04', '==')
    systemd: name=update-spamhaus-lists.timer state=started enabled=yes
    notify:
      - restart firewalld
      - restart fail2ban

  - include_tasks: fail2ban.yml
    when: ansible_distribution_major_version is version('16', '>=')
  tags: firewall

# vim: set sw=2 ts=2:

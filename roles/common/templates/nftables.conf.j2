#!/usr/sbin/nft -f
#
# Initially based on: https://wiki.nftables.org/wiki-nftables/index.php/Simple_ruleset_for_a_server
#

flush ruleset

# List updated daily by update-firehol-nftables.sh
include "/etc/nftables/firehol_level1-ipv4.nft"

# Notes:
#   - tables hold chains, chains hold rules
#   - inet is for both ipv4 and ipv6
table inet filter {
    set firehol_level1-ipv4 {
        type ipv4_addr
        # if the set contains prefixes we need to use the interval flag
        flags interval
        elements = $FIREHOL_LEVEL1_IPV4
    }

    chain input {
        type filter hook input priority 0;

        ct state {established, related} accept comment "Allow traffic from established and related packets"

        ct state invalid counter drop comment "Early drop of invalid connections"

        ip saddr @firehol_level1-ipv4 counter drop comment "Early drop of incoming packets matching firehol_level1-ipv4 list"

        iifname lo accept comment "Allow from loopback"

        ip protocol icmp limit rate 4/second accept comment "Allow ICMP"
        ip6 nexthdr ipv6-icmp limit rate 4/second accept comment "Allow IPv6 ICMP"
        ip protocol igmp limit rate 4/second accept comment "Allow IGMP"

        {# SSH rules -#}
        {% for network in ssh_access -%}
        {%     if ghetto_ipsets[network].src is defined -%}
        ip saddr {{ ghetto_ipsets[network].src }} ct state new tcp dport 22 counter accept comment "Allow SSH"
        {%     endif -%}

        {%     if ghetto_ipsets[network].ipv6src is defined -%}
        ip6 saddr {{ ghetto_ipsets[network].ipv6src }} ct state new tcp dport 22 counter accept comment "Allow IPv6 SSH"
        {%     endif -%}
        {% endfor -%}

        {# Web rules -#}
        {% if 'web' in group_names or 'dspace' in group_names -%}
        {%     for network in web_access -%}
        {%         if ghetto_ipsets[network].src is defined -%}
        ip saddr {{ ghetto_ipsets[network].src }} ct state new tcp dport 80 counter accept comment "Allow HTTP"
        ip saddr {{ ghetto_ipsets[network].src }} ct state new tcp dport 443 counter accept comment "Allow HTTPS"
        ip saddr {{ ghetto_ipsets[network].src }} ct state new udp dport 443 counter accept comment "Allow QUIC"
        {%         endif -%}

        {%         if ghetto_ipsets[network].ipv6src is defined -%}
        ip6 saddr {{ ghetto_ipsets[network].ipv6src }} ct state new tcp dport 80 counter accept comment "Allow HTTP"
        ip6 saddr {{ ghetto_ipsets[network].ipv6src }} ct state new tcp dport 443 counter accept comment "Allow HTTPS"
        ip6 saddr {{ ghetto_ipsets[network].ipv6src }} ct state new udp dport 443 counter accept comment "Allow QUIC"
        {%         endif -%}
        {%     endfor -%}
        {% endif %}

        {# Storage rules #}
        {% if 'storage' in group_names %}
        {%   if ganglia_master_host is defined %}
        {%     if ghetto_ipsets[ganglia_master_host].src is defined %}
        ip saddr {{ ghetto_ipsets[ganglia_master_host].src }} ct state new tcp dport {{ ganglia_gmond_port }} counter accept comment "Allow Ganglia gmond TCP"
        ip saddr {{ ghetto_ipsets[ganglia_master_host].src }} ct state new tcp dport {{ ganglia_gmond_port }} counter accept comment "Allow Ganglia gmond UDP"
        {%     endif %}
        {%   endif %}
        ip saddr {{ ghetto_ipsets[ganglia_master_host].src }} ct state new tcp dport {{ ganglia_gmond_port }} counter accept comment "Allow Ganglia gmond TCP"
        ip daddr 239.2.11.71/32 ct state new udp dport {{ ganglia_gmond_port }} counter accept comment "Allow multicast to Ganglia gmond"

        {%   for host in groups['storage'] %}
        {%     if host != inventory_hostname %}
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new tcp dport {{ glusterd_mgmt_port }} counter accept comment "Allow {{ host }} to Gluster management port"
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new tcp dport {{ glusterfs_brick_ports }} counter accept comment "Allow {{ host }} to Gluster bricks"
        {%     endif %}
        {%   endfor %}

        {# Explicitly add a rule for wingu2, since it's not in the storage group #}
        ip saddr {{ hostvars['wingu2']['ansible_host'] }} ct state new tcp dport {{ glusterd_mgmt_port }} counter accept comment "Allow wingu2 to Gluster management port"
        ip saddr {{ hostvars['wingu2']['ansible_host'] }} ct state new tcp dport {{ glusterfs_brick_ports }} counter accept comment "Allow wingu2 to Gluster bricks"

        {%   for host in groups['nairobi_compute'] %}
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new tcp dport {{ glusterd_mgmt_port }} counter accept comment "Allow {{ host }} to Gluster management port"
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new tcp dport {{ glusterfs_brick_ports }} counter accept comment "Allow {{ host }} to Gluster bricks"
        {%   endfor %}
        {% endif %} {# if 'storage' in group_names #}

        {# Compute rules #}
        {% if 'nairobi_compute' in group_names %}
        {%   if ghetto_ipsets[slurm_head_node].src is defined %}
        ip saddr {{ ghetto_ipsets[slurm_head_node].src }} ct state new tcp dport {{ slurm_slurmd_port }} counter accept comment "Allow SLURM head node to slurmd"
        {%     if ganglia_master_host is defined %}
        ip saddr {{ ghetto_ipsets[ganglia_master_host].src }} ct state new tcp dport {{ ganglia_gmond_port }} counter accept comment "Allow Ganglia master to gmond"
        ip saddr {{ ghetto_ipsets[ganglia_master_host].src }} ct state new udp dport {{ ganglia_gmond_port }} counter accept comment "Allow Ganglia master to gmond"
        {%     endif %}
        {%   endif %}
        ip daddr 239.2.11.71/32 ct state new udp dport {{ ganglia_gmond_port }} counter accept comment "Allow multicast to Ganglia gmond"

        {%   for host in groups['nairobi_compute'] %}
        {%     if host != inventory_hostname and host != slurm_head_node %}
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new counter accept comment "Allow from {{ host }}"
        {%     endif %}
        {%   endfor %}
        {% endif %} {# if 'nairobi_compute' in group_names #}

        {% if 'addis_compute' in group_names %}
        ip saddr {{ hostvars[slurm_head_node]['ansible_host'] }} ct state new tcp dport {{ slurm_slurmd_port }} counter accept comment "Allow SLURM head node to slurmd"

        {%   for host in groups['addis_compute'] %}
        {%     if host != inventory_hostname and host != slurm_head_node %}
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new counter accept comment "Allow from {{ host }}"
        {%     endif %}
        {%   endfor %}
        {% endif %} {# if 'addis_compute' in group_names #}

        {# Mosh ports, we only need these on publicly facing servers #}
        {% if 'compute' not in group_names and 'storage' not in group_names %}
        ip saddr 0.0.0.0/0 ct state new udp dport 60001-60003 counter accept comment "Allow mosh"
        ip6 saddr ::/0 ct state new udp dport 60001-60003 counter accept comment "Allow mosh"
        {% endif %}

        {# Extra rules -#}
        {% if extra_iptables_rules is defined -%}
        {%     for rule in extra_iptables_rules -%}
        ip saddr {{ ghetto_ipsets[rule.acl].src }} ct state new {{ rule.protocol }} dport {{ rule.port }} counter accept

        {%         if ghetto_ipsets[rule.acl].ipv6src is defined -%}
        ip6 saddr {{ ghetto_ipsets[rule.acl].ipv6src }} ct state new {{ rule.protocol }} dport {{ rule.port }} counter accept
        {%         endif -%}
        {%     endfor -%}
        {% endif -%}

        # everything else
        reject with icmpx type port-unreachable
    }
    chain forward {
        type filter hook forward priority 0;
    }
    chain output {
        type filter hook output priority 0;

        ip daddr @firehol_level1-ipv4 counter drop comment "Drop outgoing packets matching firehol_level1-ipv4 list"
    }
}

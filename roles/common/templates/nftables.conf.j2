#!/usr/sbin/nft -f
#
# Initially based on: https://wiki.nftables.org/wiki-nftables/index.php/Simple_ruleset_for_a_server
#

flush ruleset

# Lists updated daily by update-spamhaus-nftables.sh
include "/etc/nftables/spamhaus-ipv4.nft"
include "/etc/nftables/spamhaus-ipv6.nft"

# Lists updated monthly (manually)
include "/etc/nftables/abuseipdb-ipv4.nft"
include "/etc/nftables/abuseipdb-ipv6.nft"

# Lists updated daily by update-abusech-nftables.sh
include "/etc/nftables/abusech-ipv4.nft"

# List of networks belonging to Russian DDoS operator
include "/etc/nftables/russian-ddos-networks-ipv4.nft"
include "/etc/nftables/russian-ddos-networks-ipv6.nft"

# List of networks belonging to Chinese DDoS operator
include "/etc/nftables/chinese-ddos-networks-ipv4.nft"
include "/etc/nftables/chinese-ddos-networks-ipv6.nft"

# Notes:
#   - tables hold chains, chains hold rules
#   - inet is for both ipv4 and ipv6
table inet filter {
    set spamhaus-ipv4 {
        type ipv4_addr
        # if the set contains prefixes we need to use the interval flag
        flags interval
        elements = $SPAMHAUS_IPV4
    }

    set spamhaus-ipv6 {
        type ipv6_addr
        flags interval
        elements = $SPAMHAUS_IPV6
    }

    set abusech-ipv4 {
        type ipv4_addr
        elements = $ABUSECH_IPV4
    }

    set abuseipdb-ipv4 {
        type ipv4_addr
        elements = $ABUSEIPDB_IPV4
    }

    set abuseipdb-ipv6 {
        type ipv6_addr
        elements = $ABUSEIPDB_IPV6
    }

    set russian-ddos-ipv4 {
        type ipv4_addr
        flags interval
        elements = $RUSSIAN_DDOS_NETWORKS_IPV4
    }

    set russian-ddos-ipv6 {
        type ipv6_addr
        flags interval
        elements = $RUSSIAN_DDOS_NETWORKS_IPV6
    }

    set chinese-ddos-ipv4 {
        type ipv4_addr
        flags interval
        elements = $CHINESE_DDOS_NETWORKS_IPV4
    }

    set chinese-ddos-ipv6 {
        type ipv6_addr
        flags interval
        elements = $CHINESE_DDOS_NETWORKS_IPV6
    }

    chain input {
        type filter hook input priority 0;

        ct state {established, related} accept comment "Allow traffic from established and related packets"

        ct state invalid counter drop comment "Early drop of invalid connections"

        ip saddr @spamhaus-ipv4 counter drop comment "Early drop of incoming packets matching spamhaus-ipv4 list"
        ip6 saddr @spamhaus-ipv6 counter drop comment "Early drop of incoming packets matching spamhaus-ipv6 list"

        ip saddr @abusech-ipv4 counter drop comment "Early drop of packets matching abusech-ipv4 list"

        ip saddr @abuseipdb-ipv4 counter drop comment "Early drop of incoming packets matching abuseipdb-ipv4 list"
        ip6 saddr @abuseipdb-ipv6 counter drop comment "Early drop of incoming packets matching abuseipdb-ipv6 list"

        ip saddr @russian-ddos-ipv4 counter drop comment "Early drop of incoming packets matching russian-ddos-ipv4 list"
        ip6 saddr @russian-ddos-ipv6 counter drop comment "Early drop of incoming packets matching russian-ddos-ipv6 list"

        ip saddr @chinese-ddos-ipv4 counter drop comment "Early drop of incoming packets matching chinese-ddos-ipv4 list"
        ip6 saddr @chinese-ddos-ipv6 counter drop comment "Early drop of incoming packets matching chinese-ddos-ipv6 list"

        iifname lo accept comment "Allow from loopback"

        ip protocol icmp limit rate 4/second accept comment "Allow ICMP"
        ip6 nexthdr ipv6-icmp limit rate 4/second accept comment "Allow IPv6 ICMP"
        ip protocol igmp limit rate 4/second accept comment "Allow IGMP"

        {# SSH rules -#}
        {% for network in ssh_access -%}
        {%     if ghetto_ipsets[network].src is defined -%}
        ip saddr {{ ghetto_ipsets[network].src }} ct state new tcp dport 22 counter accept comment "Allow SSH"
        {%     endif -%}

        {%     if ghetto_ipsets[network].ipv6src is defined -%}
        ip6 saddr {{ ghetto_ipsets[network].ipv6src }} ct state new tcp dport 22 counter accept comment "Allow IPv6 SSH"
        {%     endif -%}
        {% endfor -%}

        {# Web rules -#}
        {% if 'web' in group_names or 'dspace' in group_names -%}
        {%     for network in web_access -%}
        {%         if ghetto_ipsets[network].src is defined -%}
        ip saddr {{ ghetto_ipsets[network].src }} ct state new tcp dport 80 counter accept comment "Allow HTTP"
        ip saddr {{ ghetto_ipsets[network].src }} ct state new tcp dport 443 counter accept comment "Allow HTTPS"
        {%         endif -%}

        {%         if ghetto_ipsets[network].ipv6src is defined -%}
        ip6 saddr {{ ghetto_ipsets[network].ipv6src }} ct state new tcp dport 80 counter accept comment "Allow HTTP"
        ip6 saddr {{ ghetto_ipsets[network].ipv6src }} ct state new tcp dport 443 counter accept comment "Allow HTTPS"
        {%         endif -%}
        {%     endfor -%}
        {% endif %}

        {# Storage rules #}
        {% if 'storage' in group_names %}
        {%   if ganglia_master_host is defined %}
        {%     if ghetto_ipsets[ganglia_master_host].src is defined %}
        ip saddr {{ ghetto_ipsets[ganglia_master_host].src }} ct state new tcp dport {{ ganglia_gmond_port }} counter accept comment "Allow Ganglia gmond TCP"
        ip saddr {{ ghetto_ipsets[ganglia_master_host].src }} ct state new tcp dport {{ ganglia_gmond_port }} counter accept comment "Allow Ganglia gmond UDP"
        {%     endif %}
        {%   endif %}
        ip saddr {{ ghetto_ipsets[ganglia_master_host].src }} ct state new tcp dport {{ ganglia_gmond_port }} counter accept comment "Allow Ganglia gmond TCP"
        ip daddr 239.2.11.71/32 ct state new udp dport {{ ganglia_gmond_port }} counter accept comment "Allow multicast to Ganglia gmond"

        {%   for host in groups['storage'] %}
        {%     if host != inventory_hostname %}
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new tcp dport {{ glusterd_mgmt_port }} counter accept comment "Allow {{ host }} to Gluster management port"
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new tcp dport {{ glusterfs_brick_ports }} counter accept comment "Allow {{ host }} to Gluster bricks"
        {%     endif %}
        {%   endfor %}

        {# Explicitly add a rule for wingu2, since it's not in the storage group #}
        ip saddr {{ hostvars['wingu2']['ansible_host'] }} ct state new tcp dport {{ glusterd_mgmt_port }} counter accept comment "Allow wingu2 to Gluster management port"
        ip saddr {{ hostvars['wingu2']['ansible_host'] }} ct state new tcp dport {{ glusterfs_brick_ports }} counter accept comment "Allow wingu2 to Gluster bricks"

        {%   for host in groups['nairobi_compute'] %}
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new tcp dport {{ glusterd_mgmt_port }} counter accept comment "Allow {{ host }} to Gluster management port"
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new tcp dport {{ glusterfs_brick_ports }} counter accept comment "Allow {{ host }} to Gluster bricks"
        {%   endfor %}
        {% endif %} {# if 'storage' in group_names #}

        {# Compute rules #}
        {% if 'nairobi_compute' in group_names %}
        {%   if ghetto_ipsets[slurm_head_node].src is defined %}
        ip saddr {{ ghetto_ipsets[slurm_head_node].src }} ct state new tcp dport {{ slurm_slurmd_port }} counter accept comment "Allow SLURM head node to slurmd"
        {%     if ganglia_master_host is defined %}
        ip saddr {{ ghetto_ipsets[ganglia_master_host].src }} ct state new tcp dport {{ ganglia_gmond_port }} counter accept comment "Allow Ganglia master to gmond"
        ip saddr {{ ghetto_ipsets[ganglia_master_host].src }} ct state new udp dport {{ ganglia_gmond_port }} counter accept comment "Allow Ganglia master to gmond"
        {%     endif %}
        {%   endif %}
        ip daddr 239.2.11.71/32 ct state new udp dport {{ ganglia_gmond_port }} counter accept comment "Allow multicast to Ganglia gmond"

        {%   for host in groups['nairobi_compute'] %}
        {%     if host != inventory_hostname and host != 'hpc' %}
        ip saddr {{ hostvars[host]['ansible_host'] }} ct state new counter accept comment "Allow from {{ host }}"
        {%     endif %}
        {%   endfor %}
        {% endif %} {# if 'nairobi_compute' in group_names #}

        {# Mosh ports, we only need these on publicly facing servers #}
        {% if 'compute' not in group_names and 'storage' not in group_names %}
        ip saddr 0.0.0.0/0 ct state new udp dport 60001-60003 counter accept comment "Allow mosh"
        ip6 saddr ::/0 ct state new udp dport 60001-60003 counter accept comment "Allow mosh"
        {% endif %}

        {# Extra rules -#}
        {% if extra_iptables_rules is defined -%}
        {%     for rule in extra_iptables_rules -%}
        ip saddr {{ ghetto_ipsets[rule.acl].src }} ct state new {{ rule.protocol }} dport {{ rule.port }} counter accept

        {%         if ghetto_ipsets[rule.acl].ipv6src is defined -%}
        ip6 saddr {{ ghetto_ipsets[rule.acl].ipv6src }} ct state new {{ rule.protocol }} dport {{ rule.port }} counter accept
        {%         endif -%}
        {%     endfor -%}
        {% endif -%}

        # everything else
        reject with icmpx type port-unreachable
    }
    chain forward {
        type filter hook forward priority 0;
    }
    chain output {
        type filter hook output priority 0;

        ip daddr @spamhaus-ipv4 counter drop comment "Drop outgoing packets matching spamhaus-ipv4 list"
        ip6 daddr @spamhaus-ipv6 counter drop comment "Drop outgoing packets matching spamhaus-ipv6 list"

        ip daddr @abusech-ipv4 counter drop comment "Drop outgoing packets matching abusech-ipv4 list"

        ip daddr @abuseipdb-ipv4 counter drop comment "Drop outgoing packets matching abuseipdb-ipv4 list"
        ip6 daddr @abuseipdb-ipv6 counter drop comment "Drop outgoing packets matching abuseipdb-ipv6 list"

        ip daddr @russian-ddos-ipv4 counter drop comment "Drop outgoing packets matching russian-ddos-ipv4 list"
        ip6 daddr @russian-ddos-ipv6 counter drop comment "Drop outgoing packets matching russian-ddos-ipv6 list"

        ip daddr @chinese-ddos-ipv4 counter drop comment "Drop outgoing packets matching chinese-ddos-ipv4 list"
        ip6 daddr @chinese-ddos-ipv6 counter drop comment "Drop outgoing packets matching chinese-ddos-ipv6 list"
    }
}

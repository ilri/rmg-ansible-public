<zone>
    <short>Public</short>
    <description>For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.</description>
    <interface name="{{ ansible_default_ipv4.interface }}"/>

    {# SSH rules #}
    {% for network in ssh_access %}
    {%   if ghetto_ipsets[network].src is defined %}
    <rule family="ipv4">
        <source address="{{ ghetto_ipsets[network].src }}"/>
        <port protocol="tcp" port="22"/>
        <accept/>
    </rule>
    {%   endif %}

    {# IPv6 SSH rules #}
    {%   if ghetto_ipsets[network].ipv6src is defined %}
    <rule family="ipv6">
        <source address="{{ ghetto_ipsets[network].ipv6src }}"/>
        <port protocol="tcp" port="22"/>
        <accept/>
    </rule>
    {%   endif %}
    {% endfor %}

    {# Web rules #}
    {% if 'web' in group_names or 'dspace' in group_names %}
    {%   for network in web_access %}
    {%     if ghetto_ipsets[network].src is defined %}
    <rule family="ipv4">
        <source address="{{ ghetto_ipsets[network].src }}"/>
        <port protocol="tcp" port="80"/>
        <accept/>
    </rule>
    <rule family="ipv4">
        <source address="{{ ghetto_ipsets[network].src }}"/>
        <port protocol="tcp" port="443"/>
        <accept/>
    </rule>
    {%     endif %}

    {# IPv6 web rules #}
    {%     if ghetto_ipsets[network].ipv6src is defined %}
    <rule family="ipv6">
        <source address="{{ ghetto_ipsets[network].ipv6src }}"/>
        <port protocol="tcp" port="80"/>
        <accept/>
    </rule>
    <rule family="ipv6">
        <source address="{{ ghetto_ipsets[network].ipv6src }}"/>
        <port protocol="tcp" port="443"/>
        <accept/>
    </rule>
    {%     endif %}
    {%   endfor %}
    {% endif %}

    {# Storage rules #}
    {% if 'storage' in group_names %}
    {%   if ganglia_master_host is defined %}
    {%     if ghetto_ipsets[ganglia_master_host].src is defined %}
     <rule family="ipv4">
        <source address="{{ ghetto_ipsets[ganglia_master_host].src }}"/>
        <port protocol="tcp" port="{{ ganglia_gmond_port }}" />
        <accept/>
    </rule>
   <rule family="ipv4">
        <source address="{{ ghetto_ipsets[ganglia_master_host].src }}"/>
        <port protocol="udp" port="{{ ganglia_gmond_port }}" />
        <accept/>
    </rule>
    {%     endif %}
    {%   endif %}
    <rule family="ipv4">
        <destination address="239.2.11.71/32"/>
        <port protocol="udp" port="{{ ganglia_gmond_port }}"/>
        <accept/>
    </rule>

    {%   for host in groups['storage'] %}
    {%     if host != inventory_hostname %}
    <rule family="ipv4">
        <source address="{{ hostvars[host]['ansible_host'] }}"/>
        <accept/>
    </rule>
    {%     endif %}
    {# Explicitly add a rule for wingu2, since it's not in the storage group #}
    <rule family="ipv4">
        <source address="{{ hostvars['wingu2']['ansible_host'] }}"/>
        <accept/>
    </rule>

    {%   endfor %}

    {%   for host in groups['compute'] %}
    {%     if host == 'hpc' %}
    <rule family="ipv4">
        <source address="{{ hostvars[host]['ansible_host'] }}"/>
        {# glusterfs_brick_ports currently uses a colon for range, but firewalld wants a dash #}
        <port protocol="tcp" port="{{ glusterfs_brick_ports | regex_replace(':', '-') }}"/>
        <accept/>
    </rule>
    <rule family="ipv4">
        <source address="{{ hostvars[host]['ansible_host'] }}"/>
        <port protocol="tcp" port="{{ glusterd_mgmt_port }}"/>
        <accept/>
    </rule>
    {%     else %}
    <rule family="ipv4">
        <source address="{{ hostvars[host]['ansible_host'] }}"/>
        <accept/>
    </rule>
    {%     endif %}
    {%   endfor %}
    {% endif %} {# if 'storage' in group_names #}

    {# SLURM rules #}
    {% if 'compute' in group_names %}
    {%   if ghetto_ipsets[slurm_head_node].src is defined %}
    <rule family="ipv4">
        <source address="{{ ghetto_ipsets[slurm_head_node].src }}"/>
        <port protocol="tcp" port="{{ slurm_slurmd_port }}"/>
        <accept/>
    </rule>
    {%     if ganglia_master_host is defined %}
    <rule family="ipv4">
        <source address="{{ ghetto_ipsets[ganglia_master_host].src }}"/>
        <port protocol="tcp" port="{{ ganglia_gmond_port }}"/>
        <accept/>
    </rule>
    <rule family="ipv4">
        <source address="{{ ghetto_ipsets[ganglia_master_host].src }}"/>
        <port protocol="udp" port="{{ ganglia_gmond_port }}"/>
        <accept/>
    </rule>
    {%     endif %}
    {%   endif %}
    <rule family="ipv4">
        <destination address="239.2.11.71/32"/>
        <port protocol="udp" port="{{ ganglia_gmond_port }}"/>
        <accept/>
    </rule>

    {%   for host in groups['compute'] %}
    {%     if host != inventory_hostname and host != 'hpc' %}
    <rule family="ipv4">
        <source address="{{ hostvars[host]['ansible_host'] }}"/>
        <accept/>
    </rule>
    {%     endif %}
    {%   endfor %}
    {% endif %} {# if 'compute' in group_names #}

    {# Mosh ports, we only need these on publicly facing servers #}
    {% if 'compute' not in group_names and 'storage' not in group_names %}
    {%   for port in (60001, 60002, 60003) %}
    <rule family="ipv4">
      <source address="0.0.0.0/0" />
      <port protocol="udp" port="{{ port }}" />
      <accept />
    </rule>
    <rule family="ipv6">
      <source address="::/0" />
      <port protocol="udp" port="{{ port }}" />
      <accept />
    </rule>
    {%   endfor %}
    {% endif %}

    {# Extra IPv4 src rules #}
    {% if extra_iptables_rules is defined %}
    {%   for rule in extra_iptables_rules %}
    {%     if ghetto_ipsets[rule.acl].src is defined %}
    <rule family="ipv4">
        <source address="{{ ghetto_ipsets[rule.acl].src }}"/>
        <port protocol="{{ rule.protocol }}" port="{{ rule.port }}"/>
        <accept/>
    </rule>
    {%     endif %}

    {# Extra IPv4 dest rules #}
    {%     if ghetto_ipsets[rule.acl].dest is defined %}
    <rule family="ipv4">
        <destination address="{{ ghetto_ipsets[rule.acl].dest }}"/>
        <port protocol="{{ rule.protocol }}" port="{{ rule.port }}"/>
        <accept/>
    </rule>
    {%     endif %}

    {# Extra IPv6 src rules #}
    {%     if ghetto_ipsets[rule.acl].ipv6src is defined %}
    <rule family="ipv6">
        <source address="{{ ghetto_ipsets[rule.acl].ipv6src }}"/>
        <port protocol="{{ rule.protocol }}" port="{{ rule.port }}"/>
        <accept/>
    </rule>
    {%     endif %}

    {# Extra IPv6 dest rules #}
    {%     if ghetto_ipsets[rule.acl].ipv6dest is defined %}
    <rule family="ipv6">
        <destination address="{{ ghetto_ipsets[rule.acl].ipv6dest }}"/>
        <port protocol="{{ rule.protocol }}" port="{{ rule.port }}"/>
        <accept/>
    </rule>
    {%     endif %}
    {%   endfor %}
    {% endif %}

    <rule>
      <source ipset="abusers-ipv4"/>
      <drop/>
    </rule>
    <rule>
      <source ipset="abusers-ipv6"/>
      <drop/>
    </rule>
    <rule>
      <source ipset="spamhaus-ipv4"/>
      <drop/>
    </rule>
    <rule>
      <source ipset="spamhaus-ipv6"/>
      <drop/>
    </rule>

</zone>

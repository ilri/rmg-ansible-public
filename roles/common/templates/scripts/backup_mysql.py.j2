#!/usr/bin/env python3

"""
Purpose:
    - Backup all mysql databases except information_schema & performance_schema
    - Send MySQL backup completion status via email to admin(s)
NOTE:
    - Since SELinux policy on CentOS 6 doesn't allow crond to read root's ~/.mailrc,
    we had to hardcode mailrc options in this script.
"""

import argparse
import json
import os
import shlex
import socket
import subprocess as sb
import sys
import tempfile
import time

# Default mysql credentials for super user account
DEF_MYSQL_USERNAME = "root"
DEF_MYSQL_PASSWORD = "root"
DEF_MYSQL_HOST = "localhost"

# If a backup process has failed, send a mail notification to admins
DEF_SEND_MAIL = False

# A space separated list of admins' email address(es) which
# notification emails will be sent to.
DEF_ADMIN_EMAILS = "{{ sysadmin_emails|join(" ") }}"

# Default absolute path to MySQL backups directory
DEF_MYSQL_BACKUPS_DIR = "/home/backup/mysql"

# SMTP configs. for mandrill API. Circumvents SELinux's policy which
# prevents crond from reading root's ~/.mailrc
MAILRC_FROM_EMAIL = "{{ mailrc_from_email }}"
MAILRC_SMTP_SERVER = "{{ mailrc_smtp_server }}"
MAILRC_AUTH_USER = "{{ mailrc_auth_user }}"
MAILRC_AUTH_PASS = "{{ mailrc_auth_pass }}"

# Paths to binaries
BIN_MYSQL = "/usr/bin/mysql"
BIN_MYSQLDUMP = "/usr/bin/mysqldump"
BIN_ZSTD = "/usr/bin/zstd"
{% if ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('16.04', '<') %}
BIN_MAIL = "/usr/bin/mail"
{% elif ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('16.04', '>=') %}
BIN_MAIL = "/usr/bin/s-nail"
{% elif ansible_distribution == 'CentOS' %}
BIN_MAIL = "/usr/bin/mailx"
{% endif %}


# Return current timestamp (used in backup filename)
def get_timestamp():
    return time.strftime("%Y-%m-%d")


# Show and parse command line arguments
def show_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "-u",
        "--username",
        default=DEF_MYSQL_USERNAME,
        help="MySQL superuser used for the backup operation",
    )
    parser.add_argument(
        "-p", "--password", default=DEF_MYSQL_PASSWORD, help="MySQL user's password"
    )
    parser.add_argument("-H", "--host", default=DEF_MYSQL_HOST, help="MySQL host")
    parser.add_argument(
        "-n",
        "--notify",
        default="No",
        help="Send MySQL backup failures status via email to admin(s)",
    )
    parser.add_argument(
        "-d",
        "--directory",
        default=DEF_MYSQL_BACKUPS_DIR,
        help="Absolute path to MySQL backups directory",
    )
    parser.add_argument(
        "--timestamp-filenames",
        default="Yes",
        help="Add YYYY-MM-DD timestamps to backup file names. You might want to disable this if you are rotating backups with something like restic or borg",
    )
    args = parser.parse_args()
    return args, parser


# Return a list of all databases accessible by the current MySQL user
def get_databases(mysql_user, mysql_pass, mysql_host):
    print("Getting the list of databases...\n")

    cmd_list_dbs = f"{BIN_MYSQL} --user={mysql_user} --password={mysql_pass} --host={mysql_host} --silent -N -e 'show databases'"

    args = shlex.split(cmd_list_dbs)
    process = sb.run(args, stdout=sb.PIPE, stderr=sb.PIPE, universal_newlines=True)

    if process.returncode != 0:
        send_mail(process.stderr)

        sys.exit()

    return process.stdout


# Iterate through a list of databases and back them up one by one
def backup_databases(
    database,
    mysql_user,
    mysql_pass,
    mysql_host,
    timestamp_filenames,
    mysql_backups_dir=DEF_MYSQL_BACKUPS_DIR,
    notify=DEF_SEND_MAIL,
):
    if timestamp_filenames:
        dump_filename = f"{mysql_backups_dir}/{database}-{get_timestamp()}.sql"
    else:
        dump_filename = f"{mysql_backups_dir}/{database}.sql"

    # Command to dump one database
    cmd_dump_db = f"{BIN_MYSQLDUMP} --user={mysql_user} --password={mysql_pass} --host={mysql_host} --events --skip-add-locks -e --opt -c {database}"
    args = shlex.split(cmd_dump_db)

    # Open the output file in Python rather than using ">" in the subprocess be-
    # cause then we would need to use shell=True.
    with open(dump_filename, "w") as sql_file:
        dump_process = sb.run(args, stdout=sql_file, stderr=sb.PIPE)

    if dump_process.returncode != 0:
        send_mail(dump_process.stderr)

        sys.exit()
    else:
        print(f"> Backed up '{database}' to '{dump_filename}'")

    # Command to compress the SQL dump. I had hoped to use a pipe construct in
    # Python by reading the previous process's stdout here, but I had utf-8
    # decode issues on some databases.
    cmd_zstd_sql = f"{BIN_ZSTD} -qf {dump_filename} -o {dump_filename}.zst"
    args = shlex.split(cmd_zstd_sql)

    compress_process = sb.run(args, stderr=sb.PIPE)

    if compress_process.returncode != 0:
        send_mail(compress_process.stderr)

        sys.exit()
    else:
        print(f"> Compressed '{dump_filename}' to {dump_filename}.zst\n")

    # Remove the SQL dump
    os.unlink(dump_filename)


# Send mail notifications with failed process status
def send_mail(status):
    mailrc_opts = f"-S from={MAILRC_FROM_EMAIL} -S smtp={MAILRC_SMTP_SERVER} -S smtp-use-starttls -S smtp-auth=login -S smtp-auth-user={MAILRC_AUTH_USER} -S smtp-auth-password={MAILRC_AUTH_PASS}"
    mail_subject = f"{socket.gethostname()} - MySQL backup status"
    cmd_send_mail = f"{BIN_MAIL} {mailrc_opts} -s '{mail_subject}' {DEF_ADMIN_EMAILS}"
    args = shlex.split(cmd_send_mail)

    mail_process = sb.run(args, input=json.dumps(status), stderr=sb.PIPE, universal_newlines=True)

    if mail_process.returncode != 0:
        print(f"Failed to send mail notification using {BIN_MAIL}")
    else:
        print(f"Notification mail(s) sent to {DEF_ADMIN_EMAILS}")


# Create backup directory if nonexistent
def create_backup_dir(backup_dir):
    if not os.path.exists(backup_dir):
        print(f"Backup directory '{backup_dir}' doesn't exist. Creating it...")
        os.makedirs(backup_dir, 0o755)


# Main function:
#     - Parse user input a.k.a cmd-line args
#     - Backup all databases except system schemas
def main():
    args, parser = show_args()
    if args.username is None or args.password is None or args.host is None:
        parser.print_help()
        return 1
    mysql_user = DEF_MYSQL_USERNAME if args.username is None else args.username
    mysql_pass = DEF_MYSQL_PASSWORD if args.password is None else args.password
    mysql_host = DEF_MYSQL_HOST if args.host is None else args.host
    mysql_backups_dir = (
        DEF_MYSQL_BACKUPS_DIR if args.directory is None else args.directory
    )

    if args.notify.lower() == "No".lower():
        notify_mail = False
    elif args.notify.lower() == "Yes".lower():
        notify_mail = True

    if args.timestamp_filenames.lower() == "No".lower():
        timestamp_filenames = False
    elif args.timestamp_filenames.lower() == "Yes".lower():
        timestamp_filenames = True

    # create backup dest. dir
    create_backup_dir(mysql_backups_dir)

    # get a list of dbs
    output = get_databases(mysql_user, mysql_pass, mysql_host)

    mysql_dbs = output.splitlines()
    for db in mysql_dbs:
        if db == "information_schema" or db == "performance_schema":
            continue
        else:
            print(f"Backing up '{db}'...")
            backup_databases(
                db,
                mysql_user,
                mysql_pass,
                mysql_host,
                timestamp_filenames,
                mysql_backups_dir,
                notify_mail,
            )

    print("Done backing up databases!")


if __name__ == "__main__":
    sys.exit(main())

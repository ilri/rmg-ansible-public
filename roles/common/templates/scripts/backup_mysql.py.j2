#!/usr/bin/env python

"""
Purpose:
    - Backup all mysql databases except information_schema & performance_schema
    - Send MySQL backup completion status via email to admin(s)
NOTE:
    - Since SELinux policy on CentOS 6 doesn't allow crond to read root's ~/.mailrc,
    we had to hardcode mailrc options in this script.
"""

import os
import sys
import json
import time
import socket
import argparse
import subprocess as sb

# Default mysql credentials for super user account
DEF_MYSQL_USERNAME = 'root'
DEF_MYSQL_PASSWORD = 'root'
DEF_MYSQL_HOST = 'localhost'

# If a backup process has failed, send a mail notification to
# admins using mailx
DEF_SEND_MAIL = False

# Attempt backing up all dbs i.e. if an error occurs
# when backing up a database, ignore it & continue
# backing up the rest
DEF_IGNORE_ERRORS = True

# A space separated list of admins' email address(es) which
# notification emails will be sent to.
DEF_ADMIN_EMAILS = "{{ sysadmin_emails|join(" ") }}"

# Default absolute path to MySQL backups directory
DEF_MYSQL_BACKUPS_DIR = "/home/backup/mysql"

# SMTP configs. for mandrill API. Circumvents SELinux's policy which
# prevents crond from reading root's ~/.mailrc
MAILRC_FROM_EMAIL = "{{ mailrc_from_email }}"
MAILRC_SMTP_SERVER = "{{ mailrc_smtp_server }}"
MAILRC_AUTH_USER = "{{ mailrc_auth_user }}"
MAILRC_AUTH_PASS = "{{ mailrc_auth_pass }}"

# Paths to binaries
BIN_MYSQL = "/usr/bin/mysql"
BIN_MYSQLDUMP = "/usr/bin/mysqldump"
BIN_GZIP = "/bin/gzip"
BIN_MAILX = "/usr/bin/mailx"


"""
return current timestamp, used in backup filename
"""
def get_timestamp():
    return time.strftime("%Y-%m-%d")


"""
show cmd-line args & parse'em
    -u, --username -> mysql username used for backup op.
    -p, --password -> mysql user's password
    -H, --host -> mysql host
    -n, --notify -> send cronjob status via mail notifications
    -d, --destination -> path mysql backups dir
    -i, --ignore-errors -> ignore any errors occurred i.e. don't exit on error
"""
def show_args():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("-u", "--username", default=DEF_MYSQL_USERNAME, help="MySQL superuser used for the backup operation")
    parser.add_argument("-p", "--password", default=DEF_MYSQL_PASSWORD, help="MySQL User's password")
    parser.add_argument("-H", "--host", default=DEF_MYSQL_HOST, help="MySQL host to connect to")
    parser.add_argument("-n", "--notify", default="No", help="Send MySQL backup completion status via email to admin(s)")
    parser.add_argument("-d", "--directory", default=DEF_MYSQL_BACKUPS_DIR, help="Absolute path to MySQL backups directory")
    parser.add_argument("-i", "--ignore-errors", default="Yes", help="Ignore any errors occurred during the backup process i.e. don't exit on error")
    args = parser.parse_args()
    return args,parser


"""
Run the given cmd & return the output
"""
def run_cmd(cmd):
    proc = sb.Popen(cmd, stdout=sb.PIPE, stderr=sb.STDOUT, shell=True)
    output, err = proc.communicate()
    return output, err, proc.returncode

"""
Using mysql creds. provided by user:
    - return a list of all dbs
"""
def get_databases(mysql_user, mysql_pass, mysql_host):
    cmd_list_dbs = "%s -u %s -p'%s' -h %s --silent -N -e 'show databases'" % (BIN_MYSQL, mysql_user, mysql_pass, mysql_host)
    return run_cmd(cmd_list_dbs)


"""
given a list of databases:
    - iterate through the list & back'em up one by one
"""
def backup_databases(database, mysql_user, mysql_pass, mysql_host, mysql_backups_dir=DEF_MYSQL_BACKUPS_DIR, notify=DEF_SEND_MAIL, ignore_errors=DEF_IGNORE_ERRORS):
    dump_filename = "%s/%s-%s.sql" % (mysql_backups_dir, database, get_timestamp())
    cmd_dump_db = "%s --events --skip-add-locks -u %s -p'%s' -h %s -e --opt -c %s > %s" % (BIN_MYSQLDUMP, mysql_user, mysql_pass, mysql_host, database, dump_filename)
    output, err, returncode = run_cmd(cmd_dump_db)
    if returncode != 0:
        job_status = "Failed to backup '%s' db.\nOutput: %s\nError: %s\nReturn Code: %d" % (database, output, err, returncode)
        print job_status
        #send mail notification
        if notify: sendmail_notification(job_status)
        if not ignore_errors:sys.exit(returncode)
    else:
        compress_backup(dump_filename, notify)
        print "Done backing up '%s' db" % database


"""
Compress dump file using gzip
"""
def compress_backup(dump_filename, notify=DEF_SEND_MAIL, ignore_errors=DEF_IGNORE_ERRORS):
    cmd_gzip_dump = "%s -c %s > %s.gz" % (BIN_GZIP, dump_filename, dump_filename)
    output, err, returncode = run_cmd(cmd_gzip_dump)
    if returncode != 0:
        job_status = "Failed to compress %s sql backup file.\nOutput: %s\nReturn Code: %d" % (dump_filename, output, returncode)
        print job_status
        #send mail notification
        if notify: sendmail_notification(job_status)
        if not ignore_errors: sys.exit(returncode)
    else:
        print "Done compressing %s sql backup file" % dump_filename
        os.unlink(dump_filename)


"""
Send mail notifications using mailx which will get mail configs./options
from ~/.mailrc
"""
def sendmail_notification(cronjob_status):
    mailrc_opts = "-S from=%s -S smtp=%s -S smtp-auth=login -S smtp-auth-user=%s -S smtp-auth-password=%s" % (MAILRC_FROM_EMAIL, MAILRC_SMTP_SERVER, MAILRC_AUTH_USER, MAILRC_AUTH_PASS)
    mail_subject = "%s - MySQL backup status" % socket.gethostname()
    cmd_sendmail = "echo %s | %s %s -s '%s' %s" % (json.dumps(cronjob_status), BIN_MAILX, mailrc_opts, mail_subject, DEF_ADMIN_EMAILS)
    output, err, returncode = run_cmd(cmd_sendmail)
    if returncode != 0:
        print "Failed to send mail notification using %s" % BIN_MAILX
    else:
        print "Notification mail(s) sent to %s" % DEF_ADMIN_EMAILS


"""
Create backup destination dir. if nonexistent
"""
def create_backup_dir(backup_dir):
    if not os.path.exists(backup_dir):
        print "Backup directory '%s' doesn't exist. Creating it..." % backup_dir
        os.makedirs(backup_dir, 0755)


"""
main function:
    - Parse user input a.k.a cmd-line args
    - backup all dbs except information_schema
    - peace out!!
"""
def main():
    args, parser = show_args()
    if args.username is None or args.password is None or args.host is None:
        parser.print_help()
        return 1
    mysql_user = DEF_MYSQL_USERNAME if args.username is None else args.username
    mysql_pass = DEF_MYSQL_PASSWORD if args.password is None else args.password
    mysql_host = DEF_MYSQL_HOST if args.host is None else args.host
    mysql_backups_dir = DEF_MYSQL_BACKUPS_DIR if args.directory is None else args.directory

    if args.notify.lower() == "No".lower():
        notify_mail = False
    elif args.notify.lower() == "Yes".lower():
        notify_mail = True

    # ignore errors
    if args.ignore_errors.lower() == "No".lower():
        ignore_errors = False
    elif args.ignore_errors.lower() == "Yes".lower():
        ignore_errors = True

    # create backup dest. dir
    create_backup_dir(mysql_backups_dir)

    # get a list of dbs, fail otherwise
    output, err, retcode = get_databases(mysql_user, mysql_pass, mysql_host)
    if retcode != 0:
        job_status = "Couldn't get a list of databases.\nOutput: %s\nError: %s\nReturn Code: %d" % (output, err, retcode)
        print job_status
        #send mail notification
        if notify_mail:
            sendmail_notification(job_status)
        sys.exit(retcode)

    mysql_dbs = output.splitlines()
    for db in mysql_dbs:
        if db == "information_schema" or db == "performance_schema":
            pass
        else:
            print "backing up '%s' db" % db
            backup_databases(db, mysql_user, mysql_pass, mysql_host, mysql_backups_dir, notify_mail, ignore_errors)
    print "Peace out !!"


# run all teh tings!
if __name__ == '__main__':
    sys.exit(main())

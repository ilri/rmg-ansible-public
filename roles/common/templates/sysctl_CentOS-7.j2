# Kernel sysctl configuration file for Red Hat Linux
#
# For binary values, 0 is disabled, 1 is enabled.  See sysctl(8) and
# sysctl.conf(5) for more details.

# Controls IP packet forwarding
net.ipv4.ip_forward = 0

# Controls source route verification
net.ipv4.conf.default.rp_filter = 1

# Do not accept source routing
net.ipv4.conf.default.accept_source_route = 0

# Controls the System Request debugging functionality of the kernel
kernel.sysrq = 1

# Controls whether core dumps will append the PID to the core filename.
# Useful for debugging multi-threaded applications.
kernel.core_uses_pid = 1

# Controls the use of TCP syncookies
net.ipv4.tcp_syncookies = 1

# Controls the default maxmimum size of a mesage queue
kernel.msgmnb = 65536

# Controls the maximum size of a message, in bytes
kernel.msgmax = 65536

# Controls the maximum shared segment size, in bytes
kernel.shmmax = 68719476736

# Controls the maximum number of shared memory segments, in pages
kernel.shmall = 4294967296

# CentOS 7 CIS Benchmark Adjustments
# CIS 1.6.2: Enable Randomized Virtual Memory Region Placement
kernel.randomize_va_space = 2

# CIS 4.1.1 Disable IP Forwarding
net.ipv4.ip_forward = 0

# CIS 4.1.2 Disable Send Packet Redirects
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

# CIS 4.2.1 Disable Source Routed Packet Acceptance
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0

# CIS 4.2.2 Disable ICMP Redirect Acceptance
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0

# CIS 4.2.3 Disable Secure ICMP Redirect Acceptance
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0

# CIS 4.2.4 Log Suspicious Packets
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1

# CIS 4.2.5 Enable Ignore Broadcast Requests
net.ipv4.icmp_echo_ignore_broadcasts = 1

# CIS 4.2.6 Enable Bad Error Message Protection
net.ipv4.icmp_ignore_bogus_error_responses = 1

# CIS 4.2.7 Enable RFC-recommended Source Route Validation
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# CIS 4.2.8 Enable TCP SYN Cookies
net.ipv4.tcp_syncookies = 1

{% if 'storage' in group_names or 'compute' in group_names or 'web' in group_names %}
# 10GbE tuning
# For a host with a 10G NIC, optimized for network paths up to 100ms RTT
# See: http://dak1n1.com/blog/7-performance-tuning-intel-10gbe
# See: http://fasterdata.es.net/host-tuning/linux/
# See: http://landley.net/kdocs/ols/2009/ols2009-pages-169-184.pdf
# See: ixgb driver docs in kernel

# increase Linux autotuning TCP buffer limit to 32MB
net.ipv4.tcp_rmem = 4096 87380 33554432
net.ipv4.tcp_wmem = 4096 65536 33554432
# more buffer space (up to 64MB)
net.core.rmem_max = 67108864
net.core.wmem_max = 67108864

# number of packets queued on input if they are received before the kernel
# can process them (after which they are dropped)
net.core.netdev_max_backlog = 30000

# TCP connection finished timeout (default is 60)
# frees up sockets earlier.
net.ipv4.tcp_fin_timeout = 30

{% if 'storage' in group_names %}
# discourage swapping of application pages to disk
# see comments by Ben England: https://www.gluster.org/community/documentation/index.php/Linux_Kernel_Tuning
# and: http://blog.syszone.co.kr/3087
vm.swappiness = 10
{% endif %}

# recommended default congestion control is htcp
net.ipv4.tcp_congestion_control = htcp
{% if ansible_virtualization_role == "NA" %}
# Recommended for hosts using jumbo frames
net.ipv4.tcp_mtu_probing = 1
{% endif %}

{% if ansible_virtualization_role == "NA" %}
# From Mellanox tuning guide
# See: http://www.mellanox.com/related-docs/prod_software/Performance_Tuning_Guide_for_Mellanox_Network_Adapters.pdf
# Enable the TCP selective acks option for better throughput
net.ipv4.tcp_sack = 1
# Disable the TCP timestamps option for better CPU utilization
net.ipv4.tcp_timestamps = 0
# low-latency TCP
net.ipv4.tcp_low_latency=1
{% endif %}
{% endif %}

{% if 'web' in group_names %}
# increase quadruplets (src ip, src port, dest ip, dest port)
# see: http://vincent.bernat.im/en/blog/2014-tcp-time-wait-state-linux.html
net.ipv4.ip_local_port_range = 10240 65535
# recommended for web servers, especially if running SPDY
# see: http://www.chromium.org/spdy/spdy-best-practices
net.ipv4.tcp_slow_start_after_idle = 0
{% endif %}

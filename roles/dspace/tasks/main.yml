---
# Explicitly install OpenJDK 8 first in a separate transaction so that tomcat8
# doesn't pull in Java 10+ via default-jre. Also, it seems there is a bug with
# apt's dependency resolution that causes maven to pull in Java 10+ in Ubuntu
# 18.04 currently.
- name: Install OpenJDK 8
  ansible.builtin.apt:
    pkg: openjdk-8-jdk-headless
    state: present
    install_recommends: false
    cache_valid_time: 3600
  when: java_distribution == 'openjdk'

- name: Set OpenJDK 8 as default java
  community.general.alternatives:
    name: java
    path: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java

# 2020-02-23: Fix issue with JFreeChart in Atmire CUA
# see https://code-maven.com/slides/jenkins-intro/no-graph-error
- name: Disable OpenJDK assistive technologies
  ansible.builtin.lineinfile:
    path: /etc/java-8-openjdk/accessibility.properties
    regexp: '^assistive_technologies=org.GNOME.Accessibility.AtkWrapper$'
    line: '#assistive_technologies=org.GNOME.Accessibility.AtkWrapper'
    state: present

# 2021-06-30: Fix slow Tomcat startup due to blocking /dev/random
# tomcat7[30294]: WARNING: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [111,733] milliseconds.
- name: Use /dev/urandom for JVM SecureRandom
  ansible.builtin.lineinfile:
    path: /etc/java-8-openjdk/security/java.security
    regexp: '^securerandom.source=file:/dev/random$'
    line: 'securerandom.source=file:/dev/urandom'
    state: present

- name: Install DSpace system dependencies
  ansible.builtin.apt:
    name:
      - ant
      - maven
      - poppler-utils # for media filter
      - python3-psycopg2 # for ansible postgres modules
      - imagemagick # for DSpace 5+ thumbnails
      - ghostscript # for DSpace 5+ PDF thumbnails
      - python3-pip # for dspace-statistics-api
      - python3-dev # for dspace-statistics-api
      - python3-venv # for dspace-statistics-api
      - libpq-dev # for dspace-statistics-api
      - geoipupdate # for DSpace statistics
      - acl # for using template with unprivileged become_user
    state: present
    install_recommends: false
    cache_valid_time: 3600

# 2018-10-11: See https://usn.ubuntu.com/3785-1
- name: Enable PDF support in ImageMagick
  ansible.builtin.lineinfile:
    path: /etc/ImageMagick-6/policy.xml
    regexp: 'pattern="PDF"'
    state: absent

- name: Add dspace group
  ansible.builtin.group:
    name: "{{ tomcat_group }}"
    system: true
  tags: tomcat

- name: Add dspace user
  ansible.builtin.user:
    name: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    system: true
    create_home: true
    home: "{{ tomcat_user_home }}"
    shell: /bin/bash
  tags: tomcat

- name: Configure Node.js
  block:
    # Use Node.js repository instead of Ubuntu's due to libssl conflicts
    # See: https://bugs.launchpad.net/ubuntu/+source/nodejs/+bug/1794589
    - name: Add Node.js apt signing key
      ansible.builtin.apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present
      register: add_nodejs_apt_key

    - name: Add Node.js 14 LTS repository
      ansible.builtin.template:
        src: nodesource.list.j2
        dest: /etc/apt/sources.list.d/nodesource.list
        mode: 0644
        owner: root
        group: root
      register: add_nodejs_apt_repository

    - name: Update apt cache
      ansible.builtin.apt: # noqa no-handler
        update_cache: true
      when:
        add_nodejs_apt_key.after is defined or
        add_nodejs_apt_repository is changed

    - name: Install DSpace Mirage 2 system build dependencies
      ansible.builtin.apt:
        name: ['build-essential', 'nodejs']
        state: present
        install_recommends: false
        cache_valid_time: 3600

    - name: Configure npm environment
      ansible.builtin.template:
        src: npmrc.j2
        dest: "{{ tomcat_user_home }}/.npmrc"
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"
        mode: 0644
      become_user: '{{ tomcat_user }}'

    - name: Install DSpace Mirage 2 Node.js build dependencies
      community.general.npm:
        name: "{{ item }}"
        global: true
      loop:
        - grunt-cli
        - yarn
      become_user: '{{ tomcat_user }}'

    - name: Add npm packages to PATH
      ansible.builtin.lineinfile:
        dest: '{{ tomcat_user_home }}/.profile'
        regexp: '^export PATH=$PATH:{{ tomcat_user_home }}/.node_modules/bin$'
        line: 'export PATH=$PATH:{{ tomcat_user_home }}/.node_modules/bin'
        state: present
      become_user: '{{ tomcat_user }}'
  when: ansible_distribution_version is version('18.04', '>=')

# For quickly analyzing nginx logs, see: https://goaccess.io/download
- name: Configure GoAccess
  block:
    - name: Add GPG key for GoAccess repo
      ansible.builtin.apt_key:
        id: C03B48887D5E56B046715D3297BD1A0133449C3D
        url: https://deb.goaccess.io/gnugpg.key
        state: present

    - name: Add new GoAccess repository
      ansible.builtin.apt_repository:
        repo: 'deb [arch=amd64] https://deb.goaccess.io/ {{ ansible_distribution_release }} main'
        filename: goaccess
        state: present

    - name: Remove old GoAccess repository
      ansible.builtin.apt_repository:
        repo: 'deb https://deb.goaccess.io/ {{ ansible_distribution_release }} main'
        filename: goaccess
        state: absent
    - name: Install GoAccess
      ansible.builtin.apt:
        pkg: goaccess
        state: present
  when: ansible_distribution_version is version('20.04', '<=')

- name: Configure nginx
  ansible.builtin.import_tasks: nginx.yml
  tags: nginx

- name: Check installed Tomcat version
  ansible.builtin.stat:
    path: "{{ tomcat_path }}"
  register: tomcat_stat
  tags: tomcat

- name: Download Tomcat
  ansible.builtin.get_url:
    url: "{{ tomcat_url }}"
    dest: "{{ tomcat_path }}.tar.gz"
    checksum: "sha512:{{ tomcat_url_checksum }}"
    mode: 0640
  register: tomcat_download
  when: not tomcat_stat.stat.exists
  tags: tomcat

- name: Unzip Tomcat
  ansible.builtin.unarchive:
    src: "{{ tomcat_path }}.tar.gz"
    dest: "{{ tomcat_path_prefix }}"
    remote_src: true
  when:
    - tomcat_download.status_code is defined
    - tomcat_download.status_code == 200
  register: tomcat_unzip
  tags: tomcat

# The Tomcat user only needs to read its configuration and write logs / work
- name: Fix Tomcat ownership
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    recurse: true
  loop:
    - { path: "{{ tomcat_path }}/conf", owner: root, group: "{{ tomcat_group }}" }
    - { path: "{{ tomcat_path }}/logs", owner: root, group: "{{ tomcat_group }}" }
    - { path: "{{ tomcat_path }}/temp", owner: root, group: "{{ tomcat_group }}" }
    - { path: "{{ tomcat_path }}/work", owner: root, group: "{{ tomcat_group }}" }
    - { path: "{{ tomcat_path }}/bin", owner: root, group: "{{ tomcat_group }}" }
    - { path: "{{ tomcat_path }}/lib", owner: root, group: "{{ tomcat_group }}" }
  when:
    - tomcat_unzip.extract_results is defined
    - tomcat_unzip.extract_results.rc == 0
  tags: tomcat

# The Tomcat user only needs to read its configuration and write logs/temp/work
- name: Fix Tomcat permissions
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: "{{ item.mode }}"
  loop:
    - { path: "{{ tomcat_path }}/logs", mode: "0770" }
    - { path: "{{ tomcat_path }}/temp", mode: "0770" }
    - { path: "{{ tomcat_path }}/work", mode: "0770" }
    - { path: "{{ tomcat_path }}/conf", mode: "0750" }
    - { path: "{{ tomcat_path }}/conf/context.xml", mode: "0640" }
    - { path: "{{ tomcat_path }}/conf/tomcat-users.xml", mode: "0640" }
    - { path: "{{ tomcat_path }}/conf/web.xml", mode: "0640" }
  when:
    - tomcat_unzip.extract_results is defined
    - tomcat_unzip.extract_results.rc == 0
  tags: tomcat

- name: Remove old Tomcat versions
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /usr/local/apache-tomcat-7.0.104.tar.gz
    - /usr/local/apache-tomcat-7.0.104
    - /usr/local/apache-tomcat-7.0.107.tar.gz
    - /usr/local/apache-tomcat-7.0.107
  tags: tomcat

- name: Copy Tomcat server configs
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  loop:
    - { src: 'tomcat/server-tomcat{{ tomcat_version_major }}.xml.j2', dest: '{{ tomcat_path }}/conf/server.xml', owner: 'root', group: '{{ tomcat_group }}', mode: '0640' }
    - { src: 'tomcat/tomcat-users.xml.j2', dest: '{{ tomcat_path }}/conf/tomcat-users.xml', owner: 'root', group: '{{ tomcat_group }}', mode: '0640' }
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

# From upstream: https://jdbc.postgresql.org/download.html
- name: Copy PostgreSQL JDBC library
  ansible.builtin.copy:
    src: postgresql-42.3.5.jar
    dest: "{{ tomcat_path }}/lib/postgresql-42.3.5.jar"
    mode: 0644
    owner: root
    group: root
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Remove old PostgreSQL JDBC libraries
  ansible.builtin.file:
    path: "{{ tomcat_path }}/lib/{{ item }}"
    state: absent
  loop:
    - postgresql-42.2.24.jar
    - postgresql-42.3.2.jar
    - postgresql-42.3.3.jar
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Create Tomcat context directory
  ansible.builtin.file:
    path: "{{ tomcat_path }}/conf/Catalina/localhost"
    state: directory
    owner: root
    group: "{{ tomcat_group }}"
    mode: 0770
  tags: tomcat

- name: Prepare Tomcat web application contexts
  ansible.builtin.template:
    src: tomcat/context.xml.j2
    dest: "{{ item.context_path }}"
    owner: root
    group: "{{ tomcat_group }}"
    mode: 0640
  loop: "{{ dspace_webapps }}"
  when: dspace_webapps is defined
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Remove unneccessary default Tomcat web applications
  ansible.builtin.file:
    path: "{{ tomcat_path }}/webapps/{{ item }}"
    state: absent
  loop:
    - docs
    - examples
    - ROOT
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Prepare tomcat user's home folder
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    state: "{{ item.state }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop:
    - { dest: '{{ tomcat_user_home }}/.m2', state: 'directory', owner: '{{ tomcat_user }}', group: '{{ tomcat_group }}', mode: '750' }
    - { dest: '{{ tomcat_user_home }}/src/git/DSpace', state: 'directory', owner: '{{ tomcat_user }}', group: '{{ tomcat_group }}', mode: '755' }
  tags: tomcat

- name: Configure rotation for Tomcat server's access logs
  ansible.builtin.template:
    src: tomcat/logrotate-access_logs.j2
    dest: /etc/logrotate.d/tomcat-access_logs
    owner: root
    group: root
    mode: 0644
  tags: tomcat

- name: Set open file limits for tomcat user
  ansible.builtin.template:
    src: tomcat/limits.conf.j2
    dest: /etc/security/limits.d/90-tomcat.conf
    owner: root
    group: root
    mode: 0644
  tags: tomcat

- name: Copy maven settings
  ansible.builtin.template:
    src: m2/settings.xml.j2
    dest: "{{ tomcat_user_home }}/.m2/settings.xml"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0640
  when:
    - maven_username is defined
    - maven_password is defined

- name: Clone DSpace repository
  ansible.builtin.git:
    repo: "{{ dspace_git_repo }}"
    dest: "{{ tomcat_user_home }}/src/git/DSpace"
    version: "{{ dspace_git_branch }}"
    force: true
    depth: 1
  become_user: '{{ tomcat_user }}'

- name: Copy DSpace local.cfg
  ansible.builtin.template:
    src: local.cfg.j2
    dest: "{{ tomcat_user_home }}/src/git/DSpace/local.cfg"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0640

- name: Copy GeoIP.conf
  ansible.builtin.template:
    src: GeoIP.conf.j2
    dest: /etc/GeoIP.conf
    owner: root
    group: root
    mode: 0640

- name: Create postgres users
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
  loop:
    - { name: '{{ dspace_db_user }}', password: '{{ dspace_db_password }}' }
    - { name: '{{ dspace_statistics_db_user }}', password: '{{ dspace_statistics_db_password }}' }
  become_user: postgres
  tags: postgresql

- name: Create postgres databases
  postgresql_db:
    name: "{{ item.name }}"
    encoding: 'UTF-8'
    template: 'template0'
    owner: "{{ item.owner }}"
  loop:
    - { name: '{{ dspace_db_name }}', owner: '{{ dspace_db_user }}' }
    - { name: '{{ dspace_statistics_db_user }}', owner: '{{ dspace_statistics_db_user }}' }
  become_user: postgres
  register: create_postgres_databases
  tags: postgresql

- name: Enable pgcrypto for DSpace 6
  postgresql_query: # noqa no-handler
    db: '{{ dspace_db_name }}'
    query: CREATE EXTENSION IF NOT EXISTS pgcrypto
  become_user: postgres
  when: create_postgres_databases is changed
  tags: postgresql

- name: Clone DSpace statistics API repository
  ansible.builtin.git:
    repo: "{{ dspace_statistics_api_git_repo }}"
    dest: "{{ dspace_statistics_api_dir }}"
    version: "{{ dspace_statistics_api_git_version }}"
    depth: 1

- name: Install DSpace statistics API dependencies
  ansible.builtin.pip:
    requirements: requirements.txt
    chdir: "{{ dspace_statistics_api_dir }}"
    virtualenv: venv
    virtualenv_command: "{{ pyvenv_command }}"
    state: forcereinstall
  notify: restart dspace-statistics-api

- name: Set up cron jobs
  ansible.builtin.template:
    src: dspace-maintenance-tasks.j2
    dest: /etc/cron.d/dspace-maintenance-tasks
    owner: root
    group: root
    mode: 0644

- name: Copy systemd service units
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/etc/systemd/system/{{ item.name }}"
    mode: 0644
    owner: root
    group: root
  loop:
    - { 'src': dspace-handle-server.service.j2, 'name': dspace-handle-server.service }
    - { 'src': dspace-statistics-api.service.j2, 'name': dspace-statistics-api.service }
    - { 'src': dspace-statistics-indexer.service.j2, 'name': dspace-statistics-indexer.service }
    - { 'src': 'tomcat/tomcat.service.j2', 'name': 'tomcat{{ tomcat_version_major }}.service' }
    - { 'src': 'cgspace-country-code-tagger.service.j2', 'name': 'cgspace-country-code-tagger.service' }
    - { 'src': 'dspace-iwmi-exporter.service.j2', 'name': 'dspace-iwmi-exporter.service' }
  register: dspace_systemd_services

- name: Copy systemd timer units
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "/etc/systemd/system/{{ item.name }}"
    mode: 0644
    owner: root
    group: root
  loop:
    - { 'src': dspace-statistics-indexer.timer, 'name': dspace-statistics-indexer.timer }
    - { 'src': cgspace-country-code-tagger.timer, 'name': cgspace-country-code-tagger.timer }
    - { 'src': dspace-iwmi-exporter.timer, 'name': dspace-iwmi-exporter.timer }
  register: dspace_systemd_timers

# We have two separate tasks for copying these environments because we need to
# be able to notify the relevant services individually.
- name: Copy dspace-statistics-api environment
  ansible.builtin.template:
    src: dspace-statistics-api.j2
    dest: /etc/dspace-statistics-api
    mode: 0640
    owner: root
    group: root
  register: dspace_systemd_environment1
  notify:
    - restart dspace-statistics-api

- name: Copy Tomcat environment
  ansible.builtin.template:
    src: tomcat/defaults.j2
    dest: "/etc/default/tomcat{{ tomcat_version_major }}"
    mode: 0640
    owner: root
    group: root
  register: dspace_systemd_environment2
  notify:
    - restart tomcat{{ tomcat_version_major }}

# need to reload to pick up service/timer/environment changes
- name: Reload systemd daemon
  ansible.builtin.systemd: # noqa no-handler
    daemon_reload: true
  when: dspace_systemd_services is changed
        or dspace_systemd_timers is changed
        or dspace_systemd_environment1 is changed
        or dspace_systemd_environment2 is changed

- name: Start and enable systemd units
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - dspace-handle-server.service
    - dspace-statistics-api.service
    - dspace-statistics-indexer.timer
    - 'tomcat{{ tomcat_version_major }}.service'
    - cgspace-country-code-tagger.timer
    - dspace-iwmi-exporter.timer

- name: Create DSpace install directory
  ansible.builtin.file:
    path: "{{ dspace_root }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0755
    state: directory

- name: Add DSpace bin directory to PATH
  ansible.builtin.template:
    src: dspace.sh.j2
    dest: /etc/profile.d/dspace.sh
    owner: root
    group: root
    mode: 0755

# vim: set sw=2 ts=2:

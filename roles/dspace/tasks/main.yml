---
# We used Oracle Java via the Webupd8 PPA for a few years, but OpenJDK is
# considered to be the reference Java implementation as of version 8 and
# has actually gotten pretty good anyways.
- block:
  - name: Add Oracle Java PPA
    apt_repository: repo='ppa:webupd8team/java' state=present

  - name: Accept Oracle license
    debconf: name='oracle-java{{ java_version_major }}-installer' question='shared/accepted-oracle-license-v1-1' value='true' vtype='select'

  - name: Install Oracle Java
    apt: pkg=oracle-java{{ java_version_major }}-set-default state=present
  when: java_distribution == 'oracle'
  tags: java

# Explicitly install OpenJDK 8 first in a separate transaction so that tomcat8
# doesn't pull in Java 10+ via default-jre. Also, it seems there is a bug with
# apt's dependency resolution that causes maven to pull in Java 10+ in Ubuntu
# 18.04 currently.
- name: Install OpenJDK 8
  apt: pkg=openjdk-8-jdk-headless state=present install_recommends=no update_cache=yes cache_valid_time=3600
  when: java_distribution == 'openjdk'

- name: Set DSpace system dependencies
  set_fact:
    dspace_system_dependencies:
      - tomcat{{ tomcat_version_major }}
      - tomcat{{ tomcat_version_major }}-admin
      - ant
      - maven
      - libtcnative-1
      - poppler-utils # for media filter
      - python-psycopg2 # for ansible postgres modules
      - postgresql-contrib-{{ pg_version }} # for DSpace functions
      - imagemagick # for DSpace 5 thumbnails
      - ghostscript # for DSpace 5 PDF thumbnails

- name: Install DSpace system dependencies
  apt: pkg={{ dspace_system_dependencies }} state=present install_recommends=no update_cache=yes cache_valid_time=3600

# On Ubuntu 14.04 and 16.04 we install Ruby and Node.js using RVM and NVM after
# the initial ansible provisioning. RVM requires these packages to compile Ruby
# and some of the gems that are used in the DSpace 5 Mirage 2 build process.
# See: https://gist.github.com/alanorth/2cf9c15834dc68a514262fcb04004cb0
- block:
  - name: Set DSpace 5 Mirage 2 build dependencies
    set_fact:
      dspace_mirage2_build_dependencies:
        - build-essential
        - libyaml-dev
        - sqlite3
        - autoconf
        - libgdbm-dev
        - libncurses5-dev
        - automake
        - libtool
        - bison
        - pkg-config
        - libffi-dev
        - gawk
        - libreadline6-dev
        - zlib1g-dev
        - libssl-dev
        - libsqlite3-dev
        - libgmp-dev
  - name: Install DSpace 5 Mirage 2 build dependencies
    apt: pkg={{ dspace_mirage2_build_dependencies }} state=present install_recommends=no
  when: ansible_distribution_version is version_compare('16.04', '<=')

- name: Set Tomcat user's shell
  user: name={{ tomcat_user }} shell=/bin/bash
  tags: tomcat

- name: Allow Tomcat user to write to its home directory
  file: path={{ tomcat_user_home }} owner={{ tomcat_user }} group={{ tomcat_group }}
  tags: tomcat

- name: Touch Tomcat user's .profile
  file: path={{ tomcat_user_home }}/.profile state=touch owner={{ tomcat_user }} group={{ tomcat_group }} mode=0644
  tags: tomcat

# On Ubuntu 18.04 we use the system's ruby and nodejs instead of installing them
# manually with RVM and NVM after provisioning the machine.
- block:
  - name: Set DSpace 5 Mirage 2 system build dependencies
    set_fact:
      dspace_mirage2_system_build_dependencies:
        - build-essential
        - nodejs
        - npm
        - ruby-dev
        - libffi-dev

  - name: Install DSpace 5 Mirage 2 system build dependencies
    apt: pkg={{ dspace_mirage2_system_build_dependencies }} state=present install_recommends=no

  - name: Install DSpace 5 Mirage 2 ruby build dependencies
    gem: name={{ item.name }} version={{ item.version }} state=present user_install=yes
    loop:
      - { name: 'sass', version: '3.3.14' }
      - { name: 'compass', version: '1.0.3' }
    become_user: '{{ tomcat_user }}'
  - name: Configure ruby environment
    lineinfile:
      dest: '{{ tomcat_user_home }}/.profile'
      regexp: '^source {{ tomcat_user_home }}/.ruby-env$'
      line: 'source {{ tomcat_user_home }}/.ruby-env'
      state: present
    become_user: '{{ tomcat_user }}'
  - name: Configure ruby environment
    template: src=ruby-env.j2 dest={{ tomcat_user_home }}/.ruby-env owner={{ tomcat_user }} group={{ tomcat_user }} mode=0644
    become_user: '{{ tomcat_user }}'
  - name: Install DSpace 5 Mirage 2 Node.js build dependencies
    npm: name={{ item }} global=yes
    loop:
      - bower
      - grunt
      - grunt-cli
  when: ansible_distribution_version is version_compare('18.04', '==')

# For quickly analyzing nginx logs, see: https://goaccess.io/download
- block:
  - name: Add GPG key for GoAccess repo
    apt_key: id=0xB222C443 url=https://deb.goaccess.io/gnugpg.key state=present
  - name: Add GoAccess repository
    apt_repository: repo='deb https://deb.goaccess.io/ {{ ansible_distribution_release }} main' filename=goaccess
  - name: Install GoAccess
    apt: pkg=goaccess state=present
  when: ansible_distribution_version is version_compare('16.04', '<=')

- name: Configure nginx
  import_tasks: nginx.yml
  tags: nginx

- name: Set Tomcat server defaults
  template: src=tomcat/defaults-tomcat{{ tomcat_version_major }}.j2 dest=/etc/default/tomcat{{ tomcat_version_major }} owner=root group=root mode=0644
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Copy Tomcat server configs
  template: src={{ item.src }} dest={{ item.dest }} mode={{ item.mode }} owner={{ item.owner }} group={{ item.group }}
  loop:
    - { src: 'tomcat/server-tomcat{{ tomcat_version_major }}.xml.j2', dest: '/etc/tomcat{{ tomcat_version_major }}/server.xml', owner: 'root', group: 'root', mode: '0644' }
    - { src: 'tomcat/tomcat-users.xml.j2', dest: '/etc/tomcat{{ tomcat_version_major }}/tomcat-users.xml', owner: 'root', group: '{{ tomcat_user }}', mode: '0640' }
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

# From upstream: https://jdbc.postgresql.org/download.html
- name: Copy PostgreSQL JDBC library
  copy: src=postgresql-42.2.5.jar dest=/usr/share/tomcat{{ tomcat_version_major }}/lib/postgresql-42.2.5.jar mode=0644 owner=root group=root
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Remove old PostgreSQL JDBC libraries
  file: path=/usr/share/tomcat{{ tomcat_version_major }}/lib/{{ item }} state=absent
  loop:
    - postgresql-42.2.1.jar
    - postgresql-42.2.2.jar
    - postgresql-42.2.4.jar
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Prepare Tomcat web application contexts
  template: src=tomcat/context.xml.j2 dest={{ item.context_path }}
  loop: "{{ dspace_webapps }}"
  when: dspace_webapps is defined
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Remove Tomcat's default ROOT context
  file: path=/var/lib/tomcat{{ tomcat_version_major }}/webapps/ROOT state=absent
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Enable Tomcat
  systemd: name=tomcat{{ tomcat_version_major }} enabled=yes
  tags: tomcat

- name: Prepare tomcat user's home folder
  file: dest={{ item.dest }} state={{ item.state }} owner={{ item.owner }} group={{ item.group }} mode={{ item.mode }}
  loop:
    - { dest: '{{ tomcat_user_home }}/.m2', state: 'directory', owner: '{{ tomcat_user }}', group: '{{ tomcat_group }}', mode: '750' }
    - { dest: '{{ tomcat_user_home }}/src/git/DSpace', state: 'directory', owner: '{{ tomcat_user }}', group: '{{ tomcat_group }}', mode: '755' }
  tags: tomcat

- name: Configure rotation for Tomcat server's access logs
  template: src=tomcat/logrotate-access_logs.j2 dest=/etc/logrotate.d/tomcat-access_logs owner=root group=root mode=0644
  tags: tomcat

- name: Set open file limits for tomcat user
  template: src=tomcat/limits.conf.j2 dest=/etc/security/limits.d/90-tomcat.conf owner=root group=root mode=0644
  tags: tomcat

- name: Copy maven settings
  template: src=m2/settings.xml.j2 dest={{ tomcat_user_home }}/.m2/settings.xml owner={{ tomcat_user }} group={{ tomcat_group }} mode=0640
  when: maven_username is defined and maven_password is defined

- name: Clone DSpace repository
  git: repo={{ dspace_git_repo }} dest={{ tomcat_user_home }}/src/git/DSpace version={{ dspace_git_branch }} depth=1
  become_user: '{{ tomcat_user }}'

- name: Copy Maven build.properties
  template: src=build.properties.j2 dest={{ tomcat_user_home }}/src/git/DSpace/{{ nginx_server_name }}.properties owner={{ tomcat_user }} group={{ tomcat_group }} mode=0640

- name: Create DSpace postgres user
  postgresql_user: name={{ dspace_db_user }} password={{ dspace_db_password }}
  become_user: postgres
  tags: postgresql

- name: Create DSpace postgres database
  postgresql_db: name={{ dspace_db_name }} encoding='UTF-8' template='template0' owner={{ dspace_db_user }}
  become_user: postgres
  tags: postgresql

- name: Set up cron jobs
  template: src=dspace-maintenance-tasks.j2 dest=/etc/cron.d/dspace-maintenance-tasks owner=root group=root mode=0644

# 2018-07: Temporary, remove task once all hosts have the systemd service below
- name: Remove old cron jobs
  file: path=/etc/cron.d/dspace-handle-server state=absent

- name: Copy systemd service to start Handle server
  template: src=dspace-handle-server.service.j2 dest=/etc/systemd/system/dspace-handle-server.service mode=0644 owner=root group=root
  register: dspace_handle_service

# need to reload to pick up service/timer changes
- name: Reload systemd daemon
  command: /bin/systemctl daemon-reload
  when: dspace_handle_service is changed

- name: Start and enable systemd service for Handle server
  systemd: name=dspace-handle-server.service state=started enabled=yes

- name: Create DSpace install directory
  file: path={{ dspace_root }} owner={{ tomcat_user }} group={{ tomcat_group }} mode=0755 state=directory

- name: Add DSpace bin directory to PATH
  template: src=dspace.sh.j2 dest=/etc/profile.d/dspace.sh owner=root group=root mode=0755

# vim: set sw=2 ts=2:

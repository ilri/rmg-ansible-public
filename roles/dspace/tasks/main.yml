---

- name: Configure OpenJDK
  ansible.builtin.import_tasks: openjdk.yml
  tags: openjdk

- name: Install DSpace system dependencies
  ansible.builtin.apt:
    name:
      - ant
      - maven
      - poppler-utils # for media filter
      - python3-psycopg2 # for ansible postgres modules
      - imagemagick # for DSpace 5+ thumbnails
      - ghostscript # for DSpace 5+ PDF thumbnails
      - python3-pip # for dspace-statistics-api
      - python3-dev # for dspace-statistics-api
      - python3-venv # for dspace-statistics-api
      - libpq-dev # for dspace-statistics-api
      - geoipupdate # for DSpace statistics
      - acl # for using template with unprivileged become_user
    state: present
    install_recommends: false
    cache_valid_time: 3600

# 2018-10-11: See https://usn.ubuntu.com/3785-1
- name: Enable PDF support in ImageMagick
  ansible.builtin.lineinfile:
    path: /etc/ImageMagick-6/policy.xml
    regexp: 'pattern="PDF"'
    state: absent

- name: Add dspace group
  ansible.builtin.group:
    name: "{{ tomcat_group }}"
    system: true
  tags: tomcat

- name: Add dspace user
  ansible.builtin.user:
    name: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    system: true
    create_home: true
    home: "{{ tomcat_user_home }}"
    shell: /bin/bash
  tags: tomcat

- name: Configure Node.js
  ansible.builtin.import_tasks: nodejs.yml
  tags: nodejs

# For quickly analyzing nginx logs, see: https://goaccess.io/download
- name: Configure GoAccess
  ansible.builtin.import_tasks: goaccess.yml
  tags: goaccess

- name: Configure nginx
  ansible.builtin.import_tasks: nginx.yml
  tags: nginx

- name: Configure Tomcat
  ansible.builtin.import_tasks: tomcat.yml
  tags: tomcat

- name: Copy maven settings
  ansible.builtin.template:
    src: m2/settings.xml.j2
    dest: "{{ tomcat_user_home }}/.m2/settings.xml"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0640
  when:
    - maven_username is defined
    - maven_password is defined

- name: Clone DSpace repository
  ansible.builtin.git:
    repo: "{{ dspace_git_repo }}"
    dest: "{{ tomcat_user_home }}/src/git/DSpace"
    version: "{{ dspace_git_branch }}"
    force: true
    depth: 1
  become_user: '{{ tomcat_user }}'

- name: Copy DSpace local.cfg
  ansible.builtin.template:
    src: local.cfg.j2
    dest: "{{ tomcat_user_home }}/src/git/DSpace/local.cfg"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0640

- name: Copy GeoIP.conf
  ansible.builtin.template:
    src: GeoIP.conf.j2
    dest: /etc/GeoIP.conf
    owner: root
    group: root
    mode: 0640

- name: Create postgres users
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
  loop:
    - { name: '{{ dspace_db_user }}', password: '{{ dspace_db_password }}' }
    - { name: '{{ dspace_statistics_db_user }}', password: '{{ dspace_statistics_db_password }}' }
  become_user: postgres
  tags: postgresql
  environment:
        PGOPTIONS: "-c password_encryption=scram-sha-256"

- name: Create postgres databases
  postgresql_db:
    name: "{{ item.name }}"
    encoding: 'UTF-8'
    template: 'template0'
    owner: "{{ item.owner }}"
  loop:
    - { name: '{{ dspace_db_name }}', owner: '{{ dspace_db_user }}' }
    - { name: '{{ dspace_statistics_db_user }}', owner: '{{ dspace_statistics_db_user }}' }
  become_user: postgres
  register: create_postgres_databases
  tags: postgresql

- name: Enable pgcrypto for DSpace 6
  postgresql_query: # noqa no-handler
    db: '{{ dspace_db_name }}'
    query: CREATE EXTENSION IF NOT EXISTS pgcrypto
  become_user: postgres
  when: create_postgres_databases is changed
  tags: postgresql

- name: Clone DSpace statistics API repository
  ansible.builtin.git:
    repo: "{{ dspace_statistics_api_git_repo }}"
    dest: "{{ dspace_statistics_api_dir }}"
    version: "{{ dspace_statistics_api_git_version }}"
    depth: 1

- name: Install DSpace statistics API dependencies
  ansible.builtin.pip:
    requirements: requirements.txt
    chdir: "{{ dspace_statistics_api_dir }}"
    virtualenv: venv
    virtualenv_command: "{{ pyvenv_command }}"
    state: forcereinstall
  notify: restart dspace-statistics-api

- name: Set up cron jobs
  ansible.builtin.template:
    src: dspace-maintenance-tasks.j2
    dest: /etc/cron.d/dspace-maintenance-tasks
    owner: root
    group: root
    mode: 0644

- name: Copy systemd service units
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/etc/systemd/system/{{ item.name }}"
    mode: 0644
    owner: root
    group: root
  loop:
    - { 'src': dspace-handle-server.service.j2, 'name': dspace-handle-server.service }
    - { 'src': dspace-statistics-api.service.j2, 'name': dspace-statistics-api.service }
    - { 'src': dspace-statistics-indexer.service.j2, 'name': dspace-statistics-indexer.service }
    - { 'src': 'tomcat/tomcat.service.j2', 'name': 'tomcat{{ tomcat_version_major }}.service' }
    - { 'src': 'cgspace-country-code-tagger.service.j2', 'name': 'cgspace-country-code-tagger.service' }
    - { 'src': 'dspace-iwmi-exporter.service.j2', 'name': 'dspace-iwmi-exporter.service' }
  register: dspace_systemd_services

- name: Copy systemd timer units
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "/etc/systemd/system/{{ item.name }}"
    mode: 0644
    owner: root
    group: root
  loop:
    - { 'src': dspace-statistics-indexer.timer, 'name': dspace-statistics-indexer.timer }
    - { 'src': cgspace-country-code-tagger.timer, 'name': cgspace-country-code-tagger.timer }
    - { 'src': dspace-iwmi-exporter.timer, 'name': dspace-iwmi-exporter.timer }
  register: dspace_systemd_timers

# We have two separate tasks for copying these environments because we need to
# be able to notify the relevant services individually.
- name: Copy dspace-statistics-api environment
  ansible.builtin.template:
    src: dspace-statistics-api.j2
    dest: /etc/dspace-statistics-api
    mode: 0640
    owner: root
    group: root
  register: dspace_systemd_environment1
  notify:
    - restart dspace-statistics-api

- name: Copy Tomcat environment
  ansible.builtin.template:
    src: tomcat/defaults.j2
    dest: "/etc/default/tomcat{{ tomcat_version_major }}"
    mode: 0640
    owner: root
    group: root
  register: dspace_systemd_environment2
  notify:
    - restart tomcat{{ tomcat_version_major }}

# need to reload to pick up service/timer/environment changes
- name: Reload systemd daemon
  ansible.builtin.systemd: # noqa no-handler
    daemon_reload: true
  when: dspace_systemd_services is changed
        or dspace_systemd_timers is changed
        or dspace_systemd_environment1 is changed
        or dspace_systemd_environment2 is changed

- name: Start and enable systemd units
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - dspace-handle-server.service
    - dspace-statistics-api.service
    - dspace-statistics-indexer.timer
    - 'tomcat{{ tomcat_version_major }}.service'
    - cgspace-country-code-tagger.timer
    - dspace-iwmi-exporter.timer

- name: Create DSpace install directory
  ansible.builtin.file:
    path: "{{ dspace_root }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: 0755
    state: directory

- name: Add DSpace bin directory to PATH
  ansible.builtin.template:
    src: dspace.sh.j2
    dest: /etc/profile.d/dspace.sh
    owner: root
    group: root
    mode: 0755

# vim: set sw=2 ts=2:

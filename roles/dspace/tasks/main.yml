---
- name: Install DSpace dependencies
  apt: pkg={{ item }} state=present install_recommends=no update_cache=yes cache_valid_time=3600
  loop:
    - tomcat{{ tomcat_version_major }}
    - tomcat{{ tomcat_version_major }}-admin
    - ant
    - maven
    - libtcnative-1
    - poppler-utils # for media filter
    - python-psycopg2 # for ansible postgres modules
    - postgresql-contrib-{{ pg_version }} # for DSpace functions
    - imagemagick # for DSpace 5 thumbnails
    - ghostscript # for DSpace 5 PDF thumbnails
  tags: packages

# on older Ubuntu we rely on RVM to compile and manage ruby
- name: Install DSpace 5 Mirage 2 build dependencies
  apt: pkg={{ item }} state=present install_recommends=no
  loop:
    - libyaml-dev
    - sqlite3
    - autoconf
    - libgdbm-dev
    - libncurses5-dev
    - automake
    - make
    - libtool
    - bison
    - pkg-config
    - libffi-dev
    - gawk
    - g++
    - libreadline6-dev
    - zlib1g-dev
    - libssl-dev
    - libsqlite3-dev
    - libgmp-dev
  when: ansible_distribution_version | version_compare('16.04', '<=')
  tags: packages

# For quickly analyzing nginx logs, see: https://goaccess.io/download
- block:
  - name: Add GPG key for GoAccess repo
    apt_key: id=0xB222C443 url=https://deb.goaccess.io/gnugpg.key state=present
  - name: Add GoAccess repository
    apt_repository: repo='deb https://deb.goaccess.io/ {{ ansible_distribution_release }} main' filename=goaccess
  - name: Install GoAccess
    apt: pkg=goaccess state=present
  when: ansible_distribution_version | version_compare('16.04', '<=')
  tags: packages

- name: Add Oracle Java PPA
  apt_repository: repo='ppa:webupd8team/java' state=present
  tags:
    - java
    - packages

- name: Accept Oracle license
  debconf: name='oracle-java{{ java_version_major }}-installer' question='shared/accepted-oracle-license-v1-1' value='true' vtype='select'
  tags:
    - java
    - packages

- name: Install Oracle Java
  apt: pkg=oracle-java{{ java_version_major }}-set-default state=present
  tags:
    - java
    - packages

- name: Configure nginx
  import_tasks: nginx.yml
  tags: nginx

- name: Set Tomcat user's shell
  user: name={{ tomcat_user }} shell=/bin/bash
  tags: tomcat

- name: Allow Tomcat user to write to its home directory
  file: path={{ tomcat_user_home }} owner={{ tomcat_user }} group={{ tomcat_group }}
  tags: tomcat

- name: Touch Tomcat user's .profile
  file: path={{ tomcat_user_home }}/.profile state=touch owner={{ tomcat_user }} group={{ tomcat_group }} mode=0644
  tags: tomcat

- name: Set Tomcat server defaults
  template: src=tomcat/defaults-tomcat{{ tomcat_version_major }}.j2 dest=/etc/default/tomcat{{ tomcat_version_major }} owner=root group=root mode=0644
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Copy Tomcat server configs
  template: src={{ item.src }} dest={{ item.dest }} mode={{ item.mode }} owner={{ item.owner }} group={{ item.group }}
  loop:
    - { src: 'tomcat/server-tomcat{{ tomcat_version_major }}.xml.j2', dest: '/etc/tomcat{{ tomcat_version_major }}/server.xml', owner: 'root', group: 'root', mode: '0644' }
    - { src: 'tomcat/tomcat-users.xml.j2', dest: '/etc/tomcat{{ tomcat_version_major }}/tomcat-users.xml', owner: 'root', group: '{{ tomcat_user }}', mode: '0640' }
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

# From upstream: https://jdbc.postgresql.org/download.html
- name: Copy PostgreSQL JDBC library
  copy: src=postgresql-42.2.2.jar dest=/usr/share/tomcat{{ tomcat_version_major }}/lib/postgresql-42.2.2.jar mode=0644 owner=root group=root
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Remove old PostgreSQL JDBC libraries
  file: path=/usr/share/tomcat{{ tomcat_version_major }}/lib/{{ item }} state=absent
  loop:
    - postgresql-42.1.4.jar
    - postgresql-42.2.1.jar
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Prepare Tomcat web application contexts
  template: src=tomcat/context.xml.j2 dest={{ item.context_path }}
  loop: "{{ dspace_webapps }}"
  when: dspace_webapps is defined
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Remove Tomcat's default ROOT context
  file: path=/var/lib/tomcat{{ tomcat_version_major }}/webapps/ROOT state=absent
  notify:
    - restart tomcat{{ tomcat_version_major }}
  tags: tomcat

- name: Enable Tomcat
  service: name=tomcat{{ tomcat_version_major }} enabled=yes
  tags: tomcat

- name: Prepare tomcat user's home folder
  file: dest={{ item.dest }} state={{ item.state }} owner={{ item.owner }} group={{ item.group }} mode={{ item.mode }}
  loop:
    - { dest: '{{ tomcat_user_home }}/.m2', state: 'directory', owner: '{{ tomcat_user }}', group: '{{ tomcat_group }}', mode: '750' }
    - { dest: '{{ tomcat_user_home }}/src/git/DSpace', state: 'directory', owner: '{{ tomcat_user }}', group: '{{ tomcat_group }}', mode: '755' }
  tags: tomcat

- name: Configure rotation for Tomcat server's access logs
  template: src=tomcat/logrotate-access_logs.j2 dest=/etc/logrotate.d/tomcat-access_logs owner=root group=root mode=0644
  tags: tomcat

- name: Set open file limits for tomcat user
  template: src=tomcat/limits.conf.j2 dest=/etc/security/limits.d/90-tomcat.conf owner=root group=root mode=0644
  tags: tomcat

- name: Copy maven settings
  template: src=m2/settings.xml.j2 dest={{ tomcat_user_home }}/.m2/settings.xml owner={{ tomcat_user }} group={{ tomcat_group }} mode=0640
  when: maven_username is defined and maven_password is defined

- name: Clone DSpace repository
  git: repo={{ dspace_git_repo }} dest={{ tomcat_user_home }}/src/git/DSpace version={{ dspace_git_branch }} depth=1
  become_user: '{{ tomcat_user }}'

- name: Create DSpace postgres user
  postgresql_user: name={{ dspace_db_user }} password={{ dspace_db_password }}
  become_user: postgres
  tags: postgresql

- name: Create DSpace postgres database
  postgresql_db: name={{ dspace_db_name }} encoding='UTF-8' template='template0' owner={{ dspace_db_user }}
  become_user: postgres
  tags: postgresql

- name: Set up cron jobs
  template: src={{ item }} dest=/etc/cron.d/{{ item | replace(".j2", "") }} owner=root group=root mode=0644
  loop:
    - dspace-handle-server.j2
    - dspace-maintenance-tasks.j2

- name: Create DSpace install directory
  file: path={{ dspace_root }} owner={{ tomcat_user }} group={{ tomcat_group }} mode=0755 state=directory

# vim: set sw=2 ts=2:

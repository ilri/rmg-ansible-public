#!/usr/bin/perl -w
# -*- perl -*-

=head1 NAME

jmx_dspace_sessions - Plugin to monitor active sessions of DSpace applications running in Tomcat via JMX

=head1 APPLICABLE SYSTEMS

Tested with Tomcat 7 on Oracle JVM 8. Please use this plugin as a template for other application-server specific monitoring.

Any JVM that supports JMX should in theory do.

=head1 CONFIGURATION

  [jmx_*]
    env.ip 127.0.0.1
    env.port 5400
    env.username monitorRole
    env.password SomethingSecret

    env.JRE_HOME /usr/lib/jvm/java-8-oracle

Needed configuration on the Tomcat side: add

  -Dcom.sun.management.jmxremote \
  -Dcom.sun.management.jmxremote.port=5400 \
  -Dcom.sun.management.jmxremote.ssl=false \
  -Dcom.sun.management.jmxremote.authenticate=false

to CATALINA_OPTS in your startup scripts.

Replace authenticate=false with
  -Dcom.sun.management.jmxremote.password.file=/etc/tomcat/jmxremote.password \
  -Dcom.sun.management.jmxremote.access.file=/etc/tomcat/jmxremote.access
 ...if you want authentication.

jmxremote.password:
 monitorRole SomethingSecret

jmxremote.access:
 monitorRole readonly

=head1 BUGS

No encryption supported in the JMX connection.

=head1 AUTHORS

=encoding UTF-8

Code written by Alan Orth. Based on the jmx_tomcat_dbpools code
by the authors below.

Code written by Jimmy Olsen, Redpill Linpro AS. This code also
uses code written by Mo Amini, Diyar Amin and Younes Hajji,
HÃ¸gskolen i Oslo/Oslo University College.

Previous work on JMX plugin by Aleksey Studnev. Support for
authentication added by Ingvar Hagelund, Redpill Linpro AS.

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=manual

=cut

use strict;

my $beans="Catalina:type=Manager,context=*,host=localhost";
# provided by the munin-plugins-java package in Ubuntu
my $munin_jar='/usr/share/munin/munin-jmx-plugins.jar';
my $java='/usr/bin/java';
my $ip=$ENV{'ip'} || "127.0.0.1";
my $port=$ENV{'port'} || "5400";

if($ENV{'JRE_HOME'}) {
    $java="$ENV{'JRE_HOME'}/bin/java";
}

sub config() {
    open(CMD, "-|", $java, "-cp", $munin_jar, "org.munin.plugin.jmx.Beans", $beans, "activeSessions") or die "Error: could not run \"$java -cp $munin_jar org.munin.plugin.jmx.Beans activeSessions\": $!";

    print "graph_title DSpace Sessions\n";
    print "graph_vlabel current sessions\n";
    print "graph_info Shows the number of sessions in each DSpace application\n";
    print "graph_category tomcat\n";

    while(my $line = <CMD>) {
        chomp($line);
        # Raw return value is like: Catalina:type=Manager,context=/,host=localhost    activeSessions  3
        if($line =~ /^[^\t]+,context=([^\t,]+),host=localhost\t[^\t]+\t([^\t]+)$/) {
            # these applications don't appear to provide session counts...
            if($line !~ /(manager|rest|solr)/) {
                my $label = $1;
                my $field = "v" . $label; # Prefix with a known good char, as field names can't start with a number
                $field =~ s/[^A-Za-z0-9]/_/g;
                print "$field.label $label\n";
            }
        }
    }

    close(CMD);
}

sub fetch() {

    # Fetch bean values (through jmx) via the command line. We basically run the class "org.munin.plugin.jmx.Beans"
    # with the parameters <bean> and <filter>, the <bean> being a bean pattern to fetch (in this case 
    # "Catalina:type=Manager,context=*,host=localhost", and <filter> being "activeSessions" (the single field
    # we're actually interested in). We can fetch multiple fields by listing them all as parameters, or list all fields
    # by not supplying a filter (only a bean).
    open(CMD, "-|", $java, "-cp", $munin_jar, "org.munin.plugin.jmx.Beans", $beans, "activeSessions") or die "Error: could not run \"$java -cp $munin_jar org.munin.plugin.jmx.Beans activeSessions\": $!";

    while(my $line = <CMD>) {
        chomp($line);
        # Raw return value is like: Catalina:type=Manager,context=/,host=localhost    activeSessions  3
        if($line =~ /^[^\t]+,context=([^\t,]+),host=localhost\t[^\t]+\t([^\t]+)$/) {
            # these applications don't appear to provide session counts...
            if($line !~ /(manager|rest|solr)/) {
                my $num   = $2;
                my $field = "v" . $1; # Prefix with a known good char, as field names can't start with a number
                $field =~ s/[^A-Za-z0-9]/_/g;
                print "$field.value $num\n";
            }
        }
    }

    close(CMD);
}

$ENV{'ip'} = $ip;
$ENV{'port'} = $port;

if(defined $ARGV[0] and $ARGV[0] eq "config") {
    config();
} else {
    fetch();
}

# vim: ts=4:ai:et:syntax=perl
